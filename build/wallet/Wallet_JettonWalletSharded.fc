#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; Wallet_JettonWalletSharded.headers.fc
;;
;; Header files for JettonWalletSharded
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_min_slice_int
(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl) inline;

;; __tact_dict_next_slice_int
(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_coins
int __tact_dict_get_slice_coins(cell d, int kl, slice k) inline;

;; __tact_dict_min_slice_coins
(slice, int, int) __tact_dict_min_slice_coins(cell d, int kl) inline;

;; __tact_dict_next_slice_coins
(slice, int, int) __tact_dict_next_slice_coins(cell d, int kl, slice pivot) inline;

;; __tact_dict_set_slice_coins
(cell, ()) __tact_dict_set_slice_coins(cell d, int kl, slice k, int v) inline;

;; __tact_dict_exists_slice
int __tact_dict_exists_slice(cell d, int kl, slice k) inline;

;; $IdInfo$_store
builder $IdInfo$_store(builder build_0, (slice, slice, slice, slice) v) inline;

;; $IdInfo$_load
(slice, ((slice, slice, slice, slice))) $IdInfo$_load(slice sc_0) inline;

;; $Insurance$_store
builder $Insurance$_store(builder build_0, (int, int) v) inline;

;; $Insurance$_store_cell
cell $Insurance$_store_cell((int, int) v, builder b) inline;

;; $Insurance$_load
(slice, ((int, int))) $Insurance$_load(slice sc_0) inline;

;; $JettonNotification$_store
builder $JettonNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $JettonNotification$_store_cell
cell $JettonNotification$_store_cell((int, int, slice, slice) v, builder b) inline;

;; $JettonBurnNotification$_store
builder $JettonBurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $JettonBurnNotification$_store_cell
cell $JettonBurnNotification$_store_cell((int, int, slice, slice) v, builder b) inline;

;; $JettonBurnNotification$_load_bounced
(slice, ((int, int))) $JettonBurnNotification$_load_bounced(slice sc_0) inline;

;; $VerifyInfo$_store
builder $VerifyInfo$_store(builder build_0, (slice, slice, cell) v) inline;

;; $VerifyInfo$_not_null
((slice, slice, cell)) $VerifyInfo$_not_null(tuple v) inline;

;; $TakeWalletBalance$_store
builder $TakeWalletBalance$_store(builder build_0, (int, tuple) v) inline;

;; $TakeWalletBalance$_store_cell
cell $TakeWalletBalance$_store_cell((int, tuple) v, builder b) inline;

;; $JettonTransferInternal$_store
builder $JettonTransferInternal$_store(builder build_0, (int, int, int, slice, slice, int, slice) v) inline;

;; $JettonTransferInternal$_store_cell
cell $JettonTransferInternal$_store_cell((int, int, int, slice, slice, int, slice) v, builder b) inline;

;; $JettonTransferInternal$_load_bounced
(slice, ((int, int, int))) $JettonTransferInternal$_load_bounced(slice sc_0) inline;

;; $RequestUpgradeCode$_store
builder $RequestUpgradeCode$_store(builder build_0, (int) v) inline;

;; $RequestUpgradeCode$_store_cell
cell $RequestUpgradeCode$_store_cell((int) v, builder b) inline;

;; $Upgrade$_store
builder $Upgrade$_store(builder build_0, (int, int, slice, cell, cell, cell, cell) v) inline;

;; $Upgrade$_store_cell
cell $Upgrade$_store_cell((int, int, slice, cell, cell, cell, cell) v, builder b) inline;

;; $IdInfo$_not_null
((slice, slice, slice, slice)) $IdInfo$_not_null(tuple v) inline;

;; $InviteInternal$_store
builder $InviteInternal$_store(builder build_0, (int, tuple, slice, slice, cell, slice) v) inline;

;; $InviteInternal$_store_cell
cell $InviteInternal$_store_cell((int, tuple, slice, slice, cell, slice) v, builder b) inline;

;; $FollowInternal$_store
builder $FollowInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $FollowInternal$_store_cell
cell $FollowInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $FollowInternal$_load_bounced
(slice, ((int))) $FollowInternal$_load_bounced(slice sc_0) inline;

;; $UnfollowInternal$_store
builder $UnfollowInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $UnfollowInternal$_store_cell
cell $UnfollowInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $UnfollowInternal$_load_bounced
(slice, ((int))) $UnfollowInternal$_load_bounced(slice sc_0) inline;

;; $FriendRequestInternal$_store
builder $FriendRequestInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $FriendRequestInternal$_store_cell
cell $FriendRequestInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $ConfirmRequestInternal$_store
builder $ConfirmRequestInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $ConfirmRequestInternal$_store_cell
cell $ConfirmRequestInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $ConfirmRequestInternal$_load_bounced
(slice, ((int))) $ConfirmRequestInternal$_load_bounced(slice sc_0) inline;

;; $ReportInternal$_store
builder $ReportInternal$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $ReportInternal$_store_cell
cell $ReportInternal$_store_cell((int, int, slice, slice) v, builder b) inline;

;; $ReportInternal$_load_bounced
(slice, ((int, int))) $ReportInternal$_load_bounced(slice sc_0) inline;

;; $DisputeInternal$_store
builder $DisputeInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $DisputeInternal$_store_cell
cell $DisputeInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $DisputeInternal$_load_bounced
(slice, ((int))) $DisputeInternal$_load_bounced(slice sc_0) inline;

;; $ResolutionInternal$_store
builder $ResolutionInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $ResolutionInternal$_store_cell
cell $ResolutionInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $UnfriendInternal$_store
builder $UnfriendInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $UnfriendInternal$_store_cell
cell $UnfriendInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $UnfriendInternal$_load_bounced
(slice, ((int))) $UnfriendInternal$_load_bounced(slice sc_0) inline;

;; $UnInviteInternal$_store
builder $UnInviteInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $UnInviteInternal$_store_cell
cell $UnInviteInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $UnInviteInternal$_load_bounced
(slice, ((int))) $UnInviteInternal$_load_bounced(slice sc_0) inline;

;; $AccCloseBurnInternal$_store
builder $AccCloseBurnInternal$_store(builder build_0, (int, slice, slice) v) inline;

;; $AccCloseBurnInternal$_store_cell
cell $AccCloseBurnInternal$_store_cell((int, slice, slice) v, builder b) inline;

;; $AccCloseBurnInternal$_load_bounced
(slice, ((int))) $AccCloseBurnInternal$_load_bounced(slice sc_0) inline;

;; $ApplyGrant$_store
builder $ApplyGrant$_store(builder build_0, (slice, int) v) inline;

;; $ApplyGrant$_store_cell
cell $ApplyGrant$_store_cell((slice, int) v, builder b) inline;

;; $VoteProposal$_store
builder $VoteProposal$_store(builder build_0, (slice, slice, int) v) inline;

;; $VoteProposal$_store_cell
cell $VoteProposal$_store_cell((slice, slice, int) v, builder b) inline;

;; $InviteApproval$_store
builder $InviteApproval$_store(builder build_0, (int, slice, slice, slice) v) inline;

;; $InviteApproval$_store_cell
cell $InviteApproval$_store_cell((int, slice, slice, slice) v, builder b) inline;

;; $InviteApproval$_load_bounced
(slice, ((int))) $InviteApproval$_load_bounced(slice sc_0) inline;

;; $MintNotify$_store
builder $MintNotify$_store(builder build_0, (int, slice) v) inline;

;; $MintNotify$_store_cell
cell $MintNotify$_store_cell((int, slice) v, builder b) inline;

;; $JettonWalletSharded$_store
builder $JettonWalletSharded$_store(builder build_0, (slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) v) inline;

;; $JettonWalletSharded$_store_cell
cell $JettonWalletSharded$_store_cell((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) v, builder b) inline;

;; $JettonWalletSharded$_load
(slice, ((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell))) $JettonWalletSharded$_load(slice sc_0) inline;

;; $StdAddress$_get_address
_ $StdAddress$_get_address((int, int) v) inline;

;; $IdInfo$_as_optional
tuple $IdInfo$_as_optional((slice, slice, slice, slice) v) inline;

;; $FriendsAndFollowings$_to_external
(cell, cell, cell, cell, cell, cell, cell) $FriendsAndFollowings$_to_external(((cell, cell, cell, cell, cell, cell, cell)) v) inline;

;; $OtherStateConsts$_to_external
(int, int, int, int, int, int, int, int, int, slice, cell) $OtherStateConsts$_to_external(((int, int, int, int, int, int, int, int, int, slice, cell)) v) inline;

;; $InvitorNominee$_to_external
(slice, slice) $InvitorNominee$_to_external(((slice, slice)) v) inline;

;; $JettonWalletData$_to_external
(int, slice, slice, cell) $JettonWalletData$_to_external(((int, slice, slice, cell)) v) inline;

;; $VerifyInfo$_as_optional
tuple $VerifyInfo$_as_optional((slice, slice, cell) v) inline;

;; $JettonWalletSharded$_to_external
(slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $JettonWalletSharded$_to_external(((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell)) v) inline;

;; $JettonWalletSharded$init$_store
builder $JettonWalletSharded$init$_store(builder build_0, (slice, slice, int) v) inline;

;; $JettonWalletSharded$init$_load
(slice, ((slice, slice, int))) $JettonWalletSharded$init$_load(slice sc_0) inline;

;; $IdInfo$_constructor_username_lattitude_longitude_address
((slice, slice, slice, slice)) $IdInfo$_constructor_username_lattitude_longitude_address(slice $username, slice $lattitude, slice $longitude, slice $address) inline;

;; $Insurance$_constructor_emi_startStop
((int, int)) $Insurance$_constructor_emi_startStop(int $emi, int $startStop) inline;

;; $JettonWalletSharded$_contract_init
(slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $JettonWalletSharded$_contract_init(slice $owner, slice $minter, int $balance) impure inline;

;; $JettonWalletSharded$_contract_load
(slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $JettonWalletSharded$_contract_load() impure inline;

;; $JettonWalletSharded$_contract_store
() $JettonWalletSharded$_contract_store((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) v) impure inline;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $BasechainAddress$_constructor_hash
((int)) $BasechainAddress$_constructor_hash(int $hash) inline;

;; $global_newBasechainAddress
(int) $global_newBasechainAddress(int $hash) impure inline;

;; $global_changeShard
int $global_changeShard(int $hash, int $shard) impure inline;

;; $Builder$_fun_storeShardedStateInit
builder $Builder$_fun_storeShardedStateInit(builder $self, (cell, cell) $init) impure inline;

;; $global_contractShardBasechainAddress
(int) $global_contractShardBasechainAddress((cell, cell) $s) impure inline;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $Address$_fun_getShard
int $Address$_fun_getShard(slice $self) impure inline;

;; $StateInit$_fun_hasSameBasechainAddressWithoutShard
int $StateInit$_fun_hasSameBasechainAddressWithoutShard((cell, cell) $self, slice $address) impure inline;

;; $MessageParameters$_fun_send
() $MessageParameters$_fun_send((int, cell, int, slice, int) $self) impure inline;

;; $ShardDeployParameters$_constructor_shard_deployParameters
(((int, cell, int, int, (cell, cell)), int)) $ShardDeployParameters$_constructor_shard_deployParameters(int $shard, (int, cell, int, int, (cell, cell)) $deployParameters) inline;

;; $DeployParameters$_fun_toShard
((int, cell, int, int, (cell, cell)), int) $DeployParameters$_fun_toShard((int, cell, int, int, (cell, cell)) $self, int $shard) impure inline;

;; $ShardDeployParameters$_fun_send
() $ShardDeployParameters$_fun_send(((int, cell, int, int, (cell, cell)), int) $self) impure inline;

;; $StateInit$_constructor_code_data
((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline;

;; $JettonWalletSharded$_init_child
(cell, cell) $JettonWalletSharded$_init_child(slice $owner, slice $minter, int $balance) inline;

;; $DeployParameters$_constructor_value_mode_body_init
((int, cell, int, int, (cell, cell))) $DeployParameters$_constructor_value_mode_body_init(int $value, int $mode, cell $body, (cell, cell) $init) inline;

;; $InviteInternal$_constructor_version_sender_invitor_currentWalletCode_forwardPayload
((int, tuple, slice, slice, cell, slice)) $InviteInternal$_constructor_version_sender_invitor_currentWalletCode_forwardPayload(int $version, slice $sender, slice $invitor, cell $currentWalletCode, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_connected
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), int) $JettonWalletSharded$_fun_connected((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver) impure inline;

;; $JettonWalletSharded$_fun_getWalletInit
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (cell, cell)) $JettonWalletSharded$_fun_getWalletInit((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $address) impure inline;

;; $JettonWalletSharded$_fun_invite
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_invite((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, slice $forwardPayload) impure inline;

;; $MessageParameters$_constructor_value_mode_to_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_value_mode_to_body(int $value, int $mode, slice $to, cell $body) inline;

;; $InviteApproval$_constructor_approved_invitor_invitee_approver
((int, slice, slice, slice)) $InviteApproval$_constructor_approved_invitor_invitee_approver(int $approved, slice $invitor, slice $invitee, slice $approver) inline;

;; $JettonWalletSharded$_fun__deductDebt
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), int) $JettonWalletSharded$_fun__deductDebt((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $amount) impure inline;

;; $JettonWalletSharded$_fun_mintInternal
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_mintInternal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $amount) impure inline;

;; $JettonWalletSharded$_fun_burnForce
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_burnForce((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount) impure inline;

;; $JettonWalletSharded$_fun_getJettonWalletInit
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), cell) $JettonWalletSharded$_fun_getJettonWalletInit((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $address) impure inline;

;; $JettonWalletSharded$_fun_getJettonWalletByOwner
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), slice) $JettonWalletSharded$_fun_getJettonWalletByOwner((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $jettonWalletOwner) impure inline;

;; $JettonWalletSharded$_fun_internalDeActivate
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_internalDeActivate((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $approved) impure inline;

;; $MessageParameters$_constructor_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $UnInviteInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $UnInviteInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_burn
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_burn((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $amount) impure inline;

;; $JettonWalletSharded$_fun_unInvite
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_unInvite((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline;

;; $FriendRequestInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $FriendRequestInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_friendRequest
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_friendRequest((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, int $amount, slice $payload) impure inline;

;; $ConfirmRequestInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $ConfirmRequestInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_confirmFRequest
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_confirmFRequest((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline;

;; $UnfriendInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $UnfriendInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_unfriend
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_unfriend((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline;

;; $JettonWalletSharded$_fun_clearAllRequests
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_clearAllRequests((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $FollowInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $FollowInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_follow
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_follow((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, int $amount, (int, int, slice, slice, cell, int, slice) $msg) impure inline;

;; $UnfollowInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $UnfollowInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_unfollow
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_unfollow((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, int $amount, (int, int, slice, slice, cell, int, slice) $msg) impure inline;

;; $JettonWalletSharded$_fun_unfollowInternal
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_unfollowInternal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount) impure inline;

;; $ReportInternal$_constructor_amount_reason_sender_forwardPayload
((int, int, slice, slice)) $ReportInternal$_constructor_amount_reason_sender_forwardPayload(int $amount, int $reason, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_report
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_report((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, slice $receiver, int $amount, int $reason, (int, int, slice, slice, cell, int, slice) $msg) impure inline;

;; $DisputeInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $DisputeInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_dispute
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_dispute((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline;

;; $JettonWalletSharded$_fun_disputeInternal
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_disputeInternal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender) impure inline;

;; $MessageParameters$_constructor_to_value_bounce_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $ResolutionInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $ResolutionInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_reportResolution
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_reportResolution((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline;

;; $JettonTransferInternal$_constructor_queryId_amount_walletVersion_sender_responseDestination_forwardTonAmount_forwardPayload
((int, int, int, slice, slice, int, slice)) $JettonTransferInternal$_constructor_queryId_amount_walletVersion_sender_responseDestination_forwardTonAmount_forwardPayload(int $queryId, int $amount, int $walletVersion, slice $sender, slice $responseDestination, int $forwardTonAmount, slice $forwardPayload) inline;

;; $AccCloseBurnInternal$_constructor_amount_sender_forwardPayload
((int, slice, slice)) $AccCloseBurnInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline;

;; $MessageParameters$_constructor_to_value_mode_bounce_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline;

;; $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination
((int, int, slice, slice)) $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination(int $queryId, int $amount, slice $sender, slice $responseDestination) inline;

;; $JettonWalletSharded$_fun_reportResolutionInternal
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_reportResolutionInternal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, (int, slice, slice) $msg) impure inline;

;; $MessageParameters$_constructor_to_value
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value(slice $to, int $value) inline;

;; $JettonWalletSharded$_fun_claimTon
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_claimTon((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $JettonWalletSharded$_fun_startRecovery
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_startRecovery((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender) impure inline;

;; $JettonWalletSharded$_fun_vetoRecovery
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_vetoRecovery((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $JettonWalletSharded$_fun_validateRecovery
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_validateRecovery((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender) impure inline;

;; $RequestUpgradeCode$_constructor_version
((int)) $RequestUpgradeCode$_constructor_version(int $version) inline;

;; $JettonWalletSharded$_fun_requestUpgrade
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_requestUpgrade((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $from) impure inline;

;; $MessageParameters$_constructor_to_mode_value_bounce_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_mode_value_bounce_body(slice $to, int $mode, int $value, int $bounce, cell $body) inline;

;; $Upgrade$_constructor_sender_walletVersion_newWalletCode
((int, int, slice, cell, cell, cell, cell)) $Upgrade$_constructor_sender_walletVersion_newWalletCode(slice $sender, int $walletVersion, cell $newWalletCode) inline;

;; $JettonWalletSharded$_fun_sendUpgrade
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_sendUpgrade((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $to) impure inline;

;; $MessageParameters$_constructor_to_mode_value_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_mode_value_body(slice $to, int $mode, int $value, cell $body) inline;

;; $VoteProposal$_constructor_sender_proposer_turnover
((slice, slice, int)) $VoteProposal$_constructor_sender_proposer_turnover(slice $sender, slice $proposer, int $turnover) inline;

;; $JettonWalletSharded$_fun_voteProposal
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_voteProposal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $proposer) impure inline;

;; $JettonWalletSharded$_fun_changeNominee
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_changeNominee((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $nominee) impure inline;

;; $JettonWalletSharded$_fun_insurance
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_insurance((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $amount) impure inline;

;; $JettonWalletSharded$_fun_correctInternalSender
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_correctInternalSender((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender) impure inline;

;; $JettonWalletSharded$_fun_syncVersion
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_syncVersion((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $senderVersion) impure inline;

;; $JettonNotification$_constructor_queryId_amount_sender_forwardPayload
((int, int, slice, slice)) $JettonNotification$_constructor_queryId_amount_sender_forwardPayload(int $queryId, int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonWalletSharded$_fun_notifyOwner
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_notifyOwner((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount, slice $forwardPayload) impure inline;

;; $JettonWalletSharded$_fun_notifyRoot
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_notifyRoot((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $approver, int $mint, int $amount) impure inline;

;; $JettonWalletSharded$_fun_changeInvitor
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_changeInvitor((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $new) impure inline;

;; $ApplyGrant$_constructor_sender_amount
((slice, int)) $ApplyGrant$_constructor_sender_amount(slice $sender, int $amount) inline;

;; $JettonWalletSharded$_fun_applyGrant
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_applyGrant((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount) impure inline;

;; $MintNotify$_constructor_amount_sender
((int, slice)) $MintNotify$_constructor_amount_sender(int $amount, slice $sender) inline;

;; $JettonWalletSharded$_fun_engagementReward
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_engagementReward((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $JettonWalletData$_constructor_balance_owner_minter_code
((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_owner_minter_code(int $balance, slice $owner, slice $minter, cell $code) inline;

;; $JettonWalletSharded$_fun_get_wallet_data
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (int, slice, slice, cell)) $JettonWalletSharded$_fun_get_wallet_data((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $JettonWalletSharded$_fun_state
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell)) $JettonWalletSharded$_fun_state((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $JettonWalletSharded$_fun_reportResolutionTime
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), int) $JettonWalletSharded$_fun_reportResolutionTime((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $InvitorNominee$_constructor_invitor_nominee
((slice, slice)) $InvitorNominee$_constructor_invitor_nominee(slice $invitor, slice $nominee) inline;

;; $JettonWalletSharded$_fun_getInvitorNominee
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (slice, slice)) $JettonWalletSharded$_fun_getInvitorNominee((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $FriendsAndFollowings$_constructor_friends_followings_followers_invited_pendingRequests_debts_reports
((cell, cell, cell, cell, cell, cell, cell)) $FriendsAndFollowings$_constructor_friends_followings_followers_invited_pendingRequests_debts_reports(cell $friends, cell $followings, cell $followers, cell $invited, cell $pendingRequests, cell $debts, cell $reports) inline;

;; $JettonWalletSharded$_fun_getFriendsAndFollowings
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (cell, cell, cell, cell, cell, cell, cell)) $JettonWalletSharded$_fun_getFriendsAndFollowings((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $OtherStateConsts$_constructor_reportReason_reporterCount_disputerCount_reportResolutionTime_connections_terminated_mbrpAmount_closureWait_active_lastMsgTo_insurance
((int, int, int, int, int, int, int, int, int, slice, cell)) $OtherStateConsts$_constructor_reportReason_reporterCount_disputerCount_reportResolutionTime_connections_terminated_mbrpAmount_closureWait_active_lastMsgTo_insurance(int $reportReason, int $reporterCount, int $disputerCount, int $reportResolutionTime, int $connections, int $terminated, int $mbrpAmount, int $closureWait, int $active, slice $lastMsgTo, cell $insurance) inline;

;; $JettonWalletSharded$_fun_otherConsts
((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (int, int, int, int, int, int, int, int, int, slice, cell)) $JettonWalletSharded$_fun_otherConsts((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline;

;; $JettonTransferInternal$_constructor_queryId_walletVersion_amount_sender_responseDestination_forwardTonAmount_forwardPayload
((int, int, int, slice, slice, int, slice)) $JettonTransferInternal$_constructor_queryId_walletVersion_amount_sender_responseDestination_forwardTonAmount_forwardPayload(int $queryId, int $walletVersion, int $amount, slice $sender, slice $responseDestination, int $forwardTonAmount, slice $forwardPayload) inline;

;; $MessageParameters$_constructor_to_value_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_body(slice $to, int $value, cell $body) inline;

;; $VerifyInfo$_constructor_minter_owner_code
((slice, slice, cell)) $VerifyInfo$_constructor_minter_owner_code(slice $minter, slice $owner, cell $code) inline;

;; $MessageParameters$_constructor_body_to_value_mode
((int, cell, int, slice, int)) $MessageParameters$_constructor_body_to_value_mode(cell $body, slice $to, int $value, int $mode) inline;

;; $TakeWalletBalance$_constructor_balance_verifyInfo
((int, tuple)) $TakeWalletBalance$_constructor_balance_verifyInfo(int $balance, tuple $verifyInfo) inline;

;; $Upgrade$_constructor_sender_walletVersion_newWalletData_newWalletCode
((int, int, slice, cell, cell, cell, cell)) $Upgrade$_constructor_sender_walletVersion_newWalletData_newWalletCode(slice $sender, int $walletVersion, cell $newWalletData, cell $newWalletCode) inline;


;; Wallet_JettonWalletSharded.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(slice, slice) __tact_load_address_opt(slice cs) asm """

            b{00} SDBEGINSQ
            IF:<{
              PUSHNULL
            }>ELSE<{
              LDMSGADDR
              SWAP
            }>

""";

builder __tact_store_addr_none(builder b) asm "b{00} STSLICECONST";

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        return __tact_store_addr_none(b);
    } else {
        return b.store_slice(address);
    }
}

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTDEL
""";

(slice, int) __tact_dict_get(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTGET NULLSWAPIFNOT
""";

(slice, slice, int) __tact_dict_min(cell dict, int key_len) asm(dict key_len -> 1 0 2) """
    DICTMIN  NULLSWAPIFNOT2
""";

(slice, slice, int) __tact_dict_next(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) """
    DICTGETNEXT NULLSWAPIFNOT2
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v) asm """
    3 TUPLE
""";

forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v) asm """
    3 UNTUPLE
""";

forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v) asm """
    4 TUPLE
""";

forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v) asm """
    4 UNTUPLE
""";

int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl) inline {
    var (key, value, flag) = __tact_dict_min(d, kl);
    if (flag) {
        return (key, value~load_int(vl), flag);
    } else {
        return (null(), null(), flag);
    }
}

(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl) inline {
    var (key, value, flag) = __tact_dict_next(d, kl, pivot);
    if (flag) {
        return (key, value~load_int(vl), flag);
    } else {
        return (null(), null(), flag);
    }
}

(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

int __tact_dict_get_slice_coins(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r~load_coins();
    } else {
        return null();
    }
}

(slice, int, int) __tact_dict_min_slice_coins(cell d, int kl) inline {
    var (key, value, flag) = __tact_dict_min(d, kl);
    if (flag) {
        return (key, value~load_coins(), flag);
    } else {
        return (null(), null(), flag);
    }
}

(slice, int, int) __tact_dict_next_slice_coins(cell d, int kl, slice pivot) inline {
    var (key, value, flag) = __tact_dict_next(d, kl, pivot);
    if (flag) {
        return (key, value~load_coins(), flag);
    } else {
        return (null(), null(), flag);
    }
}

(cell, ()) __tact_dict_set_slice_coins(cell d, int kl, slice k, int v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_coins(v)), ());
    }
}

int __tact_dict_exists_slice(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    return ok;
}

int $global_now() impure asm """
    NOW
""";

cell $global_myCode() impure asm """
    MYCODE
""";

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_divc(int $x, int $y) impure asm """
    DIVC
""";

int $global_muldivc(int $x, int $y, int $z) impure asm """
    MULDIVC
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

int $global_getComputeFee(int $gasUsed, int $isMasterchain) impure asm """
    GETGASFEE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // → Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_cashback(slice $to) impure asm """
    NEWC
    x{42_} STSLICECONST // .storeUint(0x10, 6)
    STSLICE          // .storeAddress(to)
    0 PUSHINT        // 0
    111 STUR         // .storeUint(0, 111)
                     // 4 zeros for coins and 107 zeros for lt, fees, etc.
    ENDC
    66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
    SENDRAWMSG
""";

() $global_sendRawMessage(cell $msg, int $mode) impure asm """
    SENDRAWMSG
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

() $global_emit(cell $body) impure inline {
    cell $c = $Builder$_fun_endCell($Builder$_fun_storeRef($body, store_uint($global_beginCell(), 15211807202738752817960438464513, 104)));
    $global_sendRawMessage($c, 0);
}

(int, int) $global_parseStdAddress(slice $slice) impure asm """
    REWRITESTDADDR
""";

(int) $global_newBasechainAddress(int $hash) impure inline {
    return $BasechainAddress$_constructor_hash($hash);
}

() $global_forceBasechain(slice $address) impure asm """
    REWRITESTDADDR DROP 138 THROWIF
""";

int $Cell$_fun_hash(cell $self) impure asm """
    HASHCU
""";

builder $Builder$_fun_storeBool(int $value, builder $self) impure asm """
    1 STI
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeMaybeRef(cell $cell, builder $self) impure asm """
    STOPTREF
""";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Builder$_fun_asSlice(builder $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($Builder$_fun_endCell($self));
}

(slice, ()) $Slice$_fun_skipBits(slice $self, int $l) impure asm """
    SDSKIPFIRST
""";

int $Slice$_fun_bits(slice $self) impure asm """
    SBITS
""";

(slice, slice) $Slice$_fun_loadAddress(slice $self) impure asm( -> 1 0) """
    LDMSGADDR
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

slice $Address$_fun_asSlice(slice $self) impure asm "NOP";

int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure asm """
    LDMSGADDR   // load dest:MsgAddressInt
    LDGRAMS     // load value:CurrencyCollection
    ONE
    SDSKIPFIRST // skip extra currency collection
    LDGRAMS     // load ihr_fee
    LDGRAMS     // load fwd_fee, we'll be using this!
    DROP        // drop remaining Slice (with created_lt and created_at)

    // There are 7 entries on the stack — first 3 fields of Context plus 4 loaded ones.
    // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
    6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context

    ZERO              // not masterchain
    GETORIGINALFWDFEE // floor(fwd_fee * 2^16 / (2^16 - first_frac)), where
                      // first_frac is a value listed in config param 25
                      // of the blockchain: https://tonviewer.com/config#25
                      // this instruction effectively multiplies the fwd_fee by 1.5,
                      // at least for the current value of first_frac, which is 21845
""";

;; Wallet_JettonWalletSharded.constants.fc
;; EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c
slice __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c() asm """
    B{b5ee9c72410101010024000043800000000000000000000000000000000000000000000000000000000000000000104aec829d} B>boc <s PUSHSLICE
""";

;; String ""
slice __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7() asm """
    B{b5ee9c724101010100020000004cacb9cd} B>boc <s PUSHSLICE
""";

;; Cell FXhlnOnULe0bQVSrPfmfPIgETJZFdH6Rv6gTXEOS+rI=
cell __gen_cell_cell_1578659ce9d42ded1b4154ab3df99f3c88044c9645747e91bfa8135c4392fab2() asm """
    B{b5ee9c7241010101001c00003400000000636c656172656450656e64696e675265717565737473a27d5dbe} B>boc PUSHREF
""";

;; Cell lrLAdp/TpX2y/y1M0i4MGGU2Qmt4frc/XnCFAi268kU=
cell __gen_cell_cell_96b2c0769fd3a57db2ff2d4cd22e0c186536426b787eb73f5e7085022dbaf245() asm """
    B{b5ee9c7241010101001400002400000000696e7669746520737563636573733d315a2f} B>boc PUSHREF
""";

;; Cell HYtW2kgQsepHEJRmL4WQBYe6Ica3R7LKZ/3DJkAQTfM=
cell __gen_cell_cell_1d8b56da4810b1ea471094662f85900587ba21c6b747b2ca67fdc32640104df3() asm """
    B{b5ee9c7241010101001600002800000000696e766974656420617070726f7665643daa324b} B>boc PUSHREF
""";

;; Wallet_JettonWalletSharded.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline {
    return ($code, $data);
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_value_mode_to_body(int $value, int $mode, slice $to, cell $body) inline {
    return ($mode, $body, $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value(slice $to, int $value) inline {
    return (0, null(), $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_mode_value_bounce_body(slice $to, int $mode, int $value, int $bounce, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_mode_value_body(slice $to, int $mode, int $value, cell $body) inline {
    return ($mode, $body, $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_body(slice $to, int $value, cell $body) inline {
    return (0, $body, $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_body_to_value_mode(cell $body, slice $to, int $value, int $mode) inline {
    return ($mode, $body, $value, $to, true);
}

;;
;; Type: DeployParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 bounce:bool init:StateInit{code:^cell,data:^cell} = DeployParameters
;;

((int, cell, int, int, (cell, cell))) $DeployParameters$_constructor_value_mode_body_init(int $value, int $mode, cell $body, (cell, cell) $init) inline {
    return ($mode, $body, $value, true, $init);
}

;;
;; Type: StdAddress
;; TLB: _ workchain:int8 address:uint256 = StdAddress
;;

_ $StdAddress$_get_address((int, int) v) inline {
    var (v'workchain, v'address) = v;
    return v'address;
}

;;
;; Type: BasechainAddress
;; TLB: _ hash:Maybe int257 = BasechainAddress
;;

((int)) $BasechainAddress$_constructor_hash(int $hash) inline {
    return ($hash);
}

;;
;; Type: IdInfo
;; TLB: _ username:^string lattitude:^string longitude:^string address:address = IdInfo
;;

builder $IdInfo$_store(builder build_0, (slice, slice, slice, slice) v) inline {
    var (v'username, v'lattitude, v'longitude, v'address) = v;
    build_0 = build_0.store_builder_ref(begin_cell().store_slice(v'username));
    build_0 = build_0.store_builder_ref(begin_cell().store_slice(v'lattitude));
    build_0 = build_0.store_builder_ref(begin_cell().store_slice(v'longitude));
    build_0 = build_0.store_slice(v'address);
    return build_0;
}

(slice, ((slice, slice, slice, slice))) $IdInfo$_load(slice sc_0) inline {
    var v'username = sc_0~load_ref().begin_parse();
    var v'lattitude = sc_0~load_ref().begin_parse();
    var v'longitude = sc_0~load_ref().begin_parse();
    var v'address = sc_0~load_msg_addr();
    return (sc_0, (v'username, v'lattitude, v'longitude, v'address));
}

((slice, slice, slice, slice)) $IdInfo$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'username, slice vvv'lattitude, slice vvv'longitude, slice vvv'address) = __tact_tuple_destroy_4(v);
    return (vvv'username, vvv'lattitude, vvv'longitude, vvv'address);
}

tuple $IdInfo$_as_optional((slice, slice, slice, slice) v) inline {
    var (v'username, v'lattitude, v'longitude, v'address) = v;
    return __tact_tuple_create_4(v'username, v'lattitude, v'longitude, v'address);
}

((slice, slice, slice, slice)) $IdInfo$_constructor_username_lattitude_longitude_address(slice $username, slice $lattitude, slice $longitude, slice $address) inline {
    return ($username, $lattitude, $longitude, $address);
}

;;
;; Type: Insurance
;; TLB: _ emi:coins startStop:uint42 = Insurance
;;

builder $Insurance$_store(builder build_0, (int, int) v) inline {
    var (v'emi, v'startStop) = v;
    build_0 = build_0.store_varuint16(v'emi);
    build_0 = build_0.store_uint(v'startStop, 42);
    return build_0;
}

cell $Insurance$_store_cell((int, int) v, builder b) inline {
    return $Insurance$_store(b, v).end_cell();
}

(slice, ((int, int))) $Insurance$_load(slice sc_0) inline {
    var v'emi = sc_0~load_varuint16();
    var v'startStop = sc_0~load_uint(42);
    return (sc_0, (v'emi, v'startStop));
}

((int, int)) $Insurance$_constructor_emi_startStop(int $emi, int $startStop) inline {
    return ($emi, $startStop);
}

;;
;; Type: FriendsAndFollowings
;; TLB: _ friends:Maybe ^cell followings:Maybe ^cell followers:Maybe ^cell invited:Maybe ^cell pendingRequests:Maybe ^cell debts:Maybe ^cell reports:Maybe ^cell = FriendsAndFollowings
;;

(cell, cell, cell, cell, cell, cell, cell) $FriendsAndFollowings$_to_external(((cell, cell, cell, cell, cell, cell, cell)) v) inline {
    var (v'friends, v'followings, v'followers, v'invited, v'pendingRequests, v'debts, v'reports) = v; 
    return (v'friends, v'followings, v'followers, v'invited, v'pendingRequests, v'debts, v'reports);
}

((cell, cell, cell, cell, cell, cell, cell)) $FriendsAndFollowings$_constructor_friends_followings_followers_invited_pendingRequests_debts_reports(cell $friends, cell $followings, cell $followers, cell $invited, cell $pendingRequests, cell $debts, cell $reports) inline {
    return ($friends, $followings, $followers, $invited, $pendingRequests, $debts, $reports);
}

;;
;; Type: OtherStateConsts
;; TLB: _ reportReason:bool reporterCount:uint10 disputerCount:uint10 reportResolutionTime:uint32 connections:uint8 terminated:bool mbrpAmount:coins closureWait:uint32 active:bool lastMsgTo:address insurance:^cell = OtherStateConsts
;;

(int, int, int, int, int, int, int, int, int, slice, cell) $OtherStateConsts$_to_external(((int, int, int, int, int, int, int, int, int, slice, cell)) v) inline {
    var (v'reportReason, v'reporterCount, v'disputerCount, v'reportResolutionTime, v'connections, v'terminated, v'mbrpAmount, v'closureWait, v'active, v'lastMsgTo, v'insurance) = v; 
    return (v'reportReason, v'reporterCount, v'disputerCount, v'reportResolutionTime, v'connections, v'terminated, v'mbrpAmount, v'closureWait, v'active, v'lastMsgTo, v'insurance);
}

((int, int, int, int, int, int, int, int, int, slice, cell)) $OtherStateConsts$_constructor_reportReason_reporterCount_disputerCount_reportResolutionTime_connections_terminated_mbrpAmount_closureWait_active_lastMsgTo_insurance(int $reportReason, int $reporterCount, int $disputerCount, int $reportResolutionTime, int $connections, int $terminated, int $mbrpAmount, int $closureWait, int $active, slice $lastMsgTo, cell $insurance) inline {
    return ($reportReason, $reporterCount, $disputerCount, $reportResolutionTime, $connections, $terminated, $mbrpAmount, $closureWait, $active, $lastMsgTo, $insurance);
}

;;
;; Type: InvitorNominee
;; TLB: _ invitor:address nominee:address = InvitorNominee
;;

(slice, slice) $InvitorNominee$_to_external(((slice, slice)) v) inline {
    var (v'invitor, v'nominee) = v; 
    return (v'invitor, v'nominee);
}

((slice, slice)) $InvitorNominee$_constructor_invitor_nominee(slice $invitor, slice $nominee) inline {
    return ($invitor, $nominee);
}

;;
;; Type: JettonWalletData
;; TLB: _ balance:coins owner:address minter:address code:^cell = JettonWalletData
;;

(int, slice, slice, cell) $JettonWalletData$_to_external(((int, slice, slice, cell)) v) inline {
    var (v'balance, v'owner, v'minter, v'code) = v; 
    return (v'balance, v'owner, v'minter, v'code);
}

((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_owner_minter_code(int $balance, slice $owner, slice $minter, cell $code) inline {
    return ($balance, $owner, $minter, $code);
}

;;
;; Type: JettonNotification
;; Header: 0x7362d09c
;; TLB: jetton_notification#7362d09c queryId:uint64 amount:coins sender:address forwardPayload:remainder<slice> = JettonNotification
;;

builder $JettonNotification$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'queryId, v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 1935855772, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $JettonNotification$_store_cell((int, int, slice, slice) v, builder b) inline {
    return $JettonNotification$_store(b, v).end_cell();
}

((int, int, slice, slice)) $JettonNotification$_constructor_queryId_amount_sender_forwardPayload(int $queryId, int $amount, slice $sender, slice $forwardPayload) inline {
    return ($queryId, $amount, $sender, $forwardPayload);
}

;;
;; Type: JettonBurnNotification
;; Header: 0x7bdd97de
;; TLB: jetton_burn_notification#7bdd97de queryId:uint64 amount:coins sender:address responseDestination:address = JettonBurnNotification
;;

builder $JettonBurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'queryId, v'amount, v'sender, v'responseDestination) = v;
    build_0 = store_uint(build_0, 2078119902, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = __tact_store_address_opt(build_0, v'responseDestination);
    return build_0;
}

cell $JettonBurnNotification$_store_cell((int, int, slice, slice) v, builder b) inline {
    return $JettonBurnNotification$_store(b, v).end_cell();
}

(slice, ((int, int))) $JettonBurnNotification$_load_bounced(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'queryId, v'amount));
}

((int, int, slice, slice)) $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination(int $queryId, int $amount, slice $sender, slice $responseDestination) inline {
    return ($queryId, $amount, $sender, $responseDestination);
}

;;
;; Type: VerifyInfo
;; TLB: _ owner:address minter:address code:^cell = VerifyInfo
;;

builder $VerifyInfo$_store(builder build_0, (slice, slice, cell) v) inline {
    var (v'owner, v'minter, v'code) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'minter);
    build_0 = build_0.store_ref(v'code);
    return build_0;
}

((slice, slice, cell)) $VerifyInfo$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'owner, slice vvv'minter, cell vvv'code) = __tact_tuple_destroy_3(v);
    return (vvv'owner, vvv'minter, vvv'code);
}

tuple $VerifyInfo$_as_optional((slice, slice, cell) v) inline {
    var (v'owner, v'minter, v'code) = v;
    return __tact_tuple_create_3(v'owner, v'minter, v'code);
}

((slice, slice, cell)) $VerifyInfo$_constructor_minter_owner_code(slice $minter, slice $owner, cell $code) inline {
    return ($owner, $minter, $code);
}

;;
;; Type: TakeWalletBalance
;; Header: 0xca77fdc2
;; TLB: take_wallet_balance#ca77fdc2 balance:coins verifyInfo:Maybe VerifyInfo{owner:address,minter:address,code:^cell} = TakeWalletBalance
;;

builder $TakeWalletBalance$_store(builder build_0, (int, tuple) v) inline {
    var (v'balance, v'verifyInfo) = v;
    build_0 = store_uint(build_0, 3396861378, 32);
    build_0 = build_0.store_varuint16(v'balance);
    build_0 = ~ null?(v'verifyInfo) ? build_0.store_int(true, 1).$VerifyInfo$_store($VerifyInfo$_not_null(v'verifyInfo)) : build_0.store_int(false, 1);
    return build_0;
}

cell $TakeWalletBalance$_store_cell((int, tuple) v, builder b) inline {
    return $TakeWalletBalance$_store(b, v).end_cell();
}

((int, tuple)) $TakeWalletBalance$_constructor_balance_verifyInfo(int $balance, tuple $verifyInfo) inline {
    return ($balance, $verifyInfo);
}

;;
;; Type: JettonTransferInternal
;; Header: 0x178d4519
;; TLB: jetton_transfer_internal#178d4519 queryId:uint64 walletVersion:uint10 amount:coins sender:address responseDestination:address forwardTonAmount:coins forwardPayload:remainder<slice> = JettonTransferInternal
;;

builder $JettonTransferInternal$_store(builder build_0, (int, int, int, slice, slice, int, slice) v) inline {
    var (v'queryId, v'walletVersion, v'amount, v'sender, v'responseDestination, v'forwardTonAmount, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_uint(v'walletVersion, 10);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = __tact_store_address_opt(build_0, v'responseDestination);
    build_0 = build_0.store_varuint16(v'forwardTonAmount);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $JettonTransferInternal$_store_cell((int, int, int, slice, slice, int, slice) v, builder b) inline {
    return $JettonTransferInternal$_store(b, v).end_cell();
}

(slice, ((int, int, int))) $JettonTransferInternal$_load_bounced(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'walletVersion = sc_0~load_uint(10);
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'queryId, v'walletVersion, v'amount));
}

((int, int, int, slice, slice, int, slice)) $JettonTransferInternal$_constructor_queryId_amount_walletVersion_sender_responseDestination_forwardTonAmount_forwardPayload(int $queryId, int $amount, int $walletVersion, slice $sender, slice $responseDestination, int $forwardTonAmount, slice $forwardPayload) inline {
    return ($queryId, $walletVersion, $amount, $sender, $responseDestination, $forwardTonAmount, $forwardPayload);
}

((int, int, int, slice, slice, int, slice)) $JettonTransferInternal$_constructor_queryId_walletVersion_amount_sender_responseDestination_forwardTonAmount_forwardPayload(int $queryId, int $walletVersion, int $amount, slice $sender, slice $responseDestination, int $forwardTonAmount, slice $forwardPayload) inline {
    return ($queryId, $walletVersion, $amount, $sender, $responseDestination, $forwardTonAmount, $forwardPayload);
}

;;
;; Type: RequestUpgradeCode
;; Header: 0x00000038
;; TLB: request_upgrade_code#00000038 version:uint10 = RequestUpgradeCode
;;

builder $RequestUpgradeCode$_store(builder build_0, (int) v) inline {
    var (v'version) = v;
    build_0 = store_uint(build_0, 56, 32);
    build_0 = build_0.store_uint(v'version, 10);
    return build_0;
}

cell $RequestUpgradeCode$_store_cell((int) v, builder b) inline {
    return $RequestUpgradeCode$_store(b, v).end_cell();
}

((int)) $RequestUpgradeCode$_constructor_version(int $version) inline {
    return ($version);
}

;;
;; Type: Upgrade
;; Header: 0x2508d66a
;; TLB: upgrade#2508d66a rootVersion:Maybe uint10 walletVersion:Maybe uint10 sender:address newRootData:Maybe ^cell newRootCode:Maybe ^cell newWalletData:Maybe ^cell newWalletCode:Maybe ^cell = Upgrade
;;

builder $Upgrade$_store(builder build_0, (int, int, slice, cell, cell, cell, cell) v) inline {
    var (v'rootVersion, v'walletVersion, v'sender, v'newRootData, v'newRootCode, v'newWalletData, v'newWalletCode) = v;
    build_0 = store_uint(build_0, 621336170, 32);
    build_0 = ~ null?(v'rootVersion) ? build_0.store_int(true, 1).store_uint(v'rootVersion, 10) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'walletVersion) ? build_0.store_int(true, 1).store_uint(v'walletVersion, 10) : build_0.store_int(false, 1);
    build_0 = __tact_store_address_opt(build_0, v'sender);
    build_0 = build_0.store_maybe_ref(v'newRootData);
    build_0 = build_0.store_maybe_ref(v'newRootCode);
    var build_1 = begin_cell();
    build_1 = build_1.store_maybe_ref(v'newWalletData);
    build_1 = build_1.store_maybe_ref(v'newWalletCode);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

cell $Upgrade$_store_cell((int, int, slice, cell, cell, cell, cell) v, builder b) inline {
    return $Upgrade$_store(b, v).end_cell();
}

((int, int, slice, cell, cell, cell, cell)) $Upgrade$_constructor_sender_walletVersion_newWalletCode(slice $sender, int $walletVersion, cell $newWalletCode) inline {
    return (null(), $walletVersion, $sender, null(), null(), null(), $newWalletCode);
}

((int, int, slice, cell, cell, cell, cell)) $Upgrade$_constructor_sender_walletVersion_newWalletData_newWalletCode(slice $sender, int $walletVersion, cell $newWalletData, cell $newWalletCode) inline {
    return (null(), $walletVersion, $sender, null(), null(), $newWalletData, $newWalletCode);
}

;;
;; Type: InviteInternal
;; Header: 0x00000001
;; TLB: invite_internal#00000001 version:uint10 id:Maybe IdInfo{username:^string,lattitude:^string,longitude:^string,address:address} sender:address invitor:address currentWalletCode:^cell forwardPayload:remainder<slice> = InviteInternal
;;

builder $InviteInternal$_store(builder build_0, (int, tuple, slice, slice, cell, slice) v) inline {
    var (v'version, v'id, v'sender, v'invitor, v'currentWalletCode, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 1, 32);
    build_0 = build_0.store_uint(v'version, 10);
    var build_1 = begin_cell();
    build_1 = ~ null?(v'id) ? build_1.store_int(true, 1).$IdInfo$_store($IdInfo$_not_null(v'id)) : build_1.store_int(false, 1);
    build_1 = build_1.store_slice(v'sender);
    build_1 = build_1.store_slice(v'invitor);
    build_1 = build_1.store_ref(v'currentWalletCode);
    build_1 = build_1.store_slice(v'forwardPayload);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

cell $InviteInternal$_store_cell((int, tuple, slice, slice, cell, slice) v, builder b) inline {
    return $InviteInternal$_store(b, v).end_cell();
}

((int, tuple, slice, slice, cell, slice)) $InviteInternal$_constructor_version_sender_invitor_currentWalletCode_forwardPayload(int $version, slice $sender, slice $invitor, cell $currentWalletCode, slice $forwardPayload) inline {
    return ($version, null(), $sender, $invitor, $currentWalletCode, $forwardPayload);
}

;;
;; Type: FollowInternal
;; Header: 0x00000017
;; TLB: follow_internal#00000017 amount:coins sender:address forwardPayload:remainder<slice> = FollowInternal
;;

builder $FollowInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 23, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $FollowInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $FollowInternal$_store(b, v).end_cell();
}

(slice, ((int))) $FollowInternal$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'amount));
}

((int, slice, slice)) $FollowInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: UnfollowInternal
;; Header: 0x00000005
;; TLB: unfollow_internal#00000005 amount:coins sender:address forwardPayload:remainder<slice> = UnfollowInternal
;;

builder $UnfollowInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 5, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $UnfollowInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $UnfollowInternal$_store(b, v).end_cell();
}

(slice, ((int))) $UnfollowInternal$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'amount));
}

((int, slice, slice)) $UnfollowInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: FriendRequestInternal
;; Header: 0x00000006
;; TLB: friend_request_internal#00000006 amount:coins sender:address forwardPayload:remainder<slice> = FriendRequestInternal
;;

builder $FriendRequestInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 6, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $FriendRequestInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $FriendRequestInternal$_store(b, v).end_cell();
}

((int, slice, slice)) $FriendRequestInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: ConfirmRequestInternal
;; Header: 0x00000007
;; TLB: confirm_request_internal#00000007 amount:coins sender:address forwardPayload:remainder<slice> = ConfirmRequestInternal
;;

builder $ConfirmRequestInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 7, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $ConfirmRequestInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $ConfirmRequestInternal$_store(b, v).end_cell();
}

(slice, ((int))) $ConfirmRequestInternal$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'amount));
}

((int, slice, slice)) $ConfirmRequestInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: ReportInternal
;; Header: 0x00000008
;; TLB: report_internal#00000008 amount:coins reason:bool sender:address forwardPayload:remainder<slice> = ReportInternal
;;

builder $ReportInternal$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'amount, v'reason, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 8, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_int(v'reason, 1);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $ReportInternal$_store_cell((int, int, slice, slice) v, builder b) inline {
    return $ReportInternal$_store(b, v).end_cell();
}

(slice, ((int, int))) $ReportInternal$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_varuint16();
    var v'reason = sc_0~load_int(1);
    return (sc_0, (v'amount, v'reason));
}

((int, int, slice, slice)) $ReportInternal$_constructor_amount_reason_sender_forwardPayload(int $amount, int $reason, slice $sender, slice $forwardPayload) inline {
    return ($amount, $reason, $sender, $forwardPayload);
}

;;
;; Type: DisputeInternal
;; Header: 0x00000009
;; TLB: dispute_internal#00000009 amount:coins sender:address forwardPayload:remainder<slice> = DisputeInternal
;;

builder $DisputeInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 9, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $DisputeInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $DisputeInternal$_store(b, v).end_cell();
}

(slice, ((int))) $DisputeInternal$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'amount));
}

((int, slice, slice)) $DisputeInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: ResolutionInternal
;; Header: 0x0000000a
;; TLB: resolution_internal#0000000a amount:coins sender:address forwardPayload:remainder<slice> = ResolutionInternal
;;

builder $ResolutionInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 10, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $ResolutionInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $ResolutionInternal$_store(b, v).end_cell();
}

((int, slice, slice)) $ResolutionInternal$_tensor_cast((int, slice, slice) v) asm "NOP";

((int, slice, slice)) $ResolutionInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: UnfriendInternal
;; Header: 0x00000031
;; TLB: unfriend_internal#00000031 amount:coins sender:address forwardPayload:remainder<slice> = UnfriendInternal
;;

builder $UnfriendInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 49, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $UnfriendInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $UnfriendInternal$_store(b, v).end_cell();
}

(slice, ((int))) $UnfriendInternal$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'amount));
}

((int, slice, slice)) $UnfriendInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: UnInviteInternal
;; Header: 0x00000034
;; TLB: un_invite_internal#00000034 amount:coins sender:address forwardPayload:remainder<slice> = UnInviteInternal
;;

builder $UnInviteInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 52, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $UnInviteInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $UnInviteInternal$_store(b, v).end_cell();
}

(slice, ((int))) $UnInviteInternal$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'amount));
}

((int, slice, slice)) $UnInviteInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: AccCloseBurnInternal
;; Header: 0x00000035
;; TLB: acc_close_burn_internal#00000035 amount:coins sender:address forwardPayload:remainder<slice> = AccCloseBurnInternal
;;

builder $AccCloseBurnInternal$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 53, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $AccCloseBurnInternal$_store_cell((int, slice, slice) v, builder b) inline {
    return $AccCloseBurnInternal$_store(b, v).end_cell();
}

(slice, ((int))) $AccCloseBurnInternal$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'amount));
}

((int, slice, slice)) $AccCloseBurnInternal$_constructor_amount_sender_forwardPayload(int $amount, slice $sender, slice $forwardPayload) inline {
    return ($amount, $sender, $forwardPayload);
}

;;
;; Type: ApplyGrant
;; Header: 0x00000041
;; TLB: apply_grant#00000041 sender:address amount:coins = ApplyGrant
;;

builder $ApplyGrant$_store(builder build_0, (slice, int) v) inline {
    var (v'sender, v'amount) = v;
    build_0 = store_uint(build_0, 65, 32);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_varuint16(v'amount);
    return build_0;
}

cell $ApplyGrant$_store_cell((slice, int) v, builder b) inline {
    return $ApplyGrant$_store(b, v).end_cell();
}

((slice, int)) $ApplyGrant$_constructor_sender_amount(slice $sender, int $amount) inline {
    return ($sender, $amount);
}

;;
;; Type: VoteProposal
;; Header: 0x00000042
;; TLB: vote_proposal#00000042 sender:address proposer:address turnover:coins = VoteProposal
;;

builder $VoteProposal$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'sender, v'proposer, v'turnover) = v;
    build_0 = store_uint(build_0, 66, 32);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'proposer);
    build_0 = build_0.store_varuint16(v'turnover);
    return build_0;
}

cell $VoteProposal$_store_cell((slice, slice, int) v, builder b) inline {
    return $VoteProposal$_store(b, v).end_cell();
}

((slice, slice, int)) $VoteProposal$_constructor_sender_proposer_turnover(slice $sender, slice $proposer, int $turnover) inline {
    return ($sender, $proposer, $turnover);
}

;;
;; Type: InviteApproval
;; Header: 0x00000044
;; TLB: invite_approval#00000044 approved:bool invitor:address invitee:address approver:address = InviteApproval
;;

builder $InviteApproval$_store(builder build_0, (int, slice, slice, slice) v) inline {
    var (v'approved, v'invitor, v'invitee, v'approver) = v;
    build_0 = store_uint(build_0, 68, 32);
    build_0 = build_0.store_int(v'approved, 1);
    build_0 = build_0.store_slice(v'invitor);
    build_0 = build_0.store_slice(v'invitee);
    build_0 = build_0.store_slice(v'approver);
    return build_0;
}

cell $InviteApproval$_store_cell((int, slice, slice, slice) v, builder b) inline {
    return $InviteApproval$_store(b, v).end_cell();
}

(slice, ((int))) $InviteApproval$_load_bounced(slice sc_0) inline {
    var v'approved = sc_0~load_int(1);
    return (sc_0, (v'approved));
}

((int, slice, slice, slice)) $InviteApproval$_constructor_approved_invitor_invitee_approver(int $approved, slice $invitor, slice $invitee, slice $approver) inline {
    return ($approved, $invitor, $invitee, $approver);
}

;;
;; Type: MintNotify
;; Header: 0x00000046
;; TLB: mint_notify#00000046 amount:coins sender:address = MintNotify
;;

builder $MintNotify$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'sender) = v;
    build_0 = store_uint(build_0, 70, 32);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    return build_0;
}

cell $MintNotify$_store_cell((int, slice) v, builder b) inline {
    return $MintNotify$_store(b, v).end_cell();
}

((int, slice)) $MintNotify$_constructor_amount_sender(int $amount, slice $sender) inline {
    return ($amount, $sender);
}

;;
;; Type: ShardDeployParameters
;; TLB: _ deployParameters:DeployParameters{mode:int257,body:Maybe ^cell,value:int257,bounce:bool,init:StateInit{code:^cell,data:^cell}} shard:uint8 = ShardDeployParameters
;;

(((int, cell, int, int, (cell, cell)), int)) $ShardDeployParameters$_constructor_shard_deployParameters(int $shard, (int, cell, int, int, (cell, cell)) $deployParameters) inline {
    return ($deployParameters, $shard);
}

;;
;; Type: JettonWalletSharded
;; TLB: _ owner:address ownerAfterRecovery:address minter:address nominee:address invitor:address invitor0:address id:IdInfo{username:^string,lattitude:^string,longitude:^string,address:address} balance:coins taxAsTxnFeePercent:int6 turnover:coins debts:dict<address, coins> debt:coins insurance:Insurance{emi:coins,startStop:uint42} invited:dict<address, coins> friends:dict<address, coins> closeFriendsAndVouched:dict<address, bool> closeFriendsCount:uint4 recoveryVouchersCount:uint4 pendingRequests:dict<address, coins> followers:dict<address, coins> followings:dict<address, coins> reports:dict<address, bool> reportReason:bool reporterCount:uint10 disputerCount:uint10 reportResolutionTime:uint32 connections:uint8 terminated:bool active:bool accountInitTime:uint32 lastTxnTime:uint32 lastMsgTo:address version:uint10 mintable:bool lastRewardClaimTime:uint32 baseWalletCode:^cell = JettonWalletSharded
;;

builder $JettonWalletSharded$_store(builder build_0, (slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) v) inline {
    var (v'owner, v'ownerAfterRecovery, v'minter, v'nominee, v'invitor, v'invitor0, (v'id'username, v'id'lattitude, v'id'longitude, v'id'address), v'balance, v'taxAsTxnFeePercent, v'turnover, v'debts, v'debt, (v'insurance'emi, v'insurance'startStop), v'invited, v'friends, v'closeFriendsAndVouched, v'closeFriendsCount, v'recoveryVouchersCount, v'pendingRequests, v'followers, v'followings, v'reports, v'reportReason, v'reporterCount, v'disputerCount, v'reportResolutionTime, v'connections, v'terminated, v'active, v'accountInitTime, v'lastTxnTime, v'lastMsgTo, v'version, v'mintable, v'lastRewardClaimTime, v'baseWalletCode) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'ownerAfterRecovery);
    build_0 = build_0.store_slice(v'minter);
    var build_1 = begin_cell();
    build_1 = build_1.store_slice(v'nominee);
    build_1 = build_1.store_slice(v'invitor);
    build_1 = __tact_store_address_opt(build_1, v'invitor0);
    var build_2 = begin_cell();
    build_2 = $IdInfo$_store(build_2, (v'id'username, v'id'lattitude, v'id'longitude, v'id'address));
    build_2 = build_2.store_varuint16(v'balance);
    build_2 = build_2.store_int(v'taxAsTxnFeePercent, 6);
    build_2 = build_2.store_varuint16(v'turnover);
    var build_3 = begin_cell();
    build_3 = build_3.store_dict(v'debts);
    build_3 = build_3.store_varuint16(v'debt);
    build_3 = $Insurance$_store(build_3, (v'insurance'emi, v'insurance'startStop));
    build_3 = build_3.store_dict(v'invited);
    build_3 = build_3.store_dict(v'friends);
    var build_4 = begin_cell();
    build_4 = build_4.store_dict(v'closeFriendsAndVouched);
    build_4 = build_4.store_uint(v'closeFriendsCount, 4);
    build_4 = build_4.store_uint(v'recoveryVouchersCount, 4);
    build_4 = build_4.store_dict(v'pendingRequests);
    build_4 = build_4.store_dict(v'followers);
    var build_5 = begin_cell();
    build_5 = build_5.store_dict(v'followings);
    build_5 = build_5.store_dict(v'reports);
    build_5 = build_5.store_int(v'reportReason, 1);
    build_5 = build_5.store_uint(v'reporterCount, 10);
    build_5 = build_5.store_uint(v'disputerCount, 10);
    build_5 = build_5.store_uint(v'reportResolutionTime, 32);
    build_5 = build_5.store_uint(v'connections, 8);
    build_5 = build_5.store_int(v'terminated, 1);
    build_5 = build_5.store_int(v'active, 1);
    build_5 = build_5.store_uint(v'accountInitTime, 32);
    build_5 = build_5.store_uint(v'lastTxnTime, 32);
    build_5 = build_5.store_slice(v'lastMsgTo);
    build_5 = build_5.store_uint(v'version, 10);
    build_5 = build_5.store_int(v'mintable, 1);
    build_5 = build_5.store_uint(v'lastRewardClaimTime, 32);
    build_5 = build_5.store_ref(v'baseWalletCode);
    build_4 = store_builder_ref(build_4, build_5);
    build_3 = store_builder_ref(build_3, build_4);
    build_2 = store_builder_ref(build_2, build_3);
    build_1 = store_builder_ref(build_1, build_2);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

cell $JettonWalletSharded$_store_cell((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) v, builder b) inline {
    return $JettonWalletSharded$_store(b, v).end_cell();
}

(slice, ((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell))) $JettonWalletSharded$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'ownerAfterRecovery = sc_0~load_msg_addr();
    var v'minter = sc_0~load_msg_addr();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'nominee = sc_1~load_msg_addr();
    var v'invitor = sc_1~load_msg_addr();
    var v'invitor0 = sc_1~__tact_load_address_opt();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'id = sc_2~$IdInfo$_load();
    var v'balance = sc_2~load_varuint16();
    var v'taxAsTxnFeePercent = sc_2~load_int(6);
    var v'turnover = sc_2~load_varuint16();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'debts = sc_3~load_dict();
    var v'debt = sc_3~load_varuint16();
    var v'insurance = sc_3~$Insurance$_load();
    var v'invited = sc_3~load_dict();
    var v'friends = sc_3~load_dict();
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'closeFriendsAndVouched = sc_4~load_dict();
    var v'closeFriendsCount = sc_4~load_uint(4);
    var v'recoveryVouchersCount = sc_4~load_uint(4);
    var v'pendingRequests = sc_4~load_dict();
    var v'followers = sc_4~load_dict();
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'followings = sc_5~load_dict();
    var v'reports = sc_5~load_dict();
    var v'reportReason = sc_5~load_int(1);
    var v'reporterCount = sc_5~load_uint(10);
    var v'disputerCount = sc_5~load_uint(10);
    var v'reportResolutionTime = sc_5~load_uint(32);
    var v'connections = sc_5~load_uint(8);
    var v'terminated = sc_5~load_int(1);
    var v'active = sc_5~load_int(1);
    var v'accountInitTime = sc_5~load_uint(32);
    var v'lastTxnTime = sc_5~load_uint(32);
    var v'lastMsgTo = sc_5~load_msg_addr();
    var v'version = sc_5~load_uint(10);
    var v'mintable = sc_5~load_int(1);
    var v'lastRewardClaimTime = sc_5~load_uint(32);
    var v'baseWalletCode = sc_5~load_ref();
    return (sc_0, (v'owner, v'ownerAfterRecovery, v'minter, v'nominee, v'invitor, v'invitor0, v'id, v'balance, v'taxAsTxnFeePercent, v'turnover, v'debts, v'debt, v'insurance, v'invited, v'friends, v'closeFriendsAndVouched, v'closeFriendsCount, v'recoveryVouchersCount, v'pendingRequests, v'followers, v'followings, v'reports, v'reportReason, v'reporterCount, v'disputerCount, v'reportResolutionTime, v'connections, v'terminated, v'active, v'accountInitTime, v'lastTxnTime, v'lastMsgTo, v'version, v'mintable, v'lastRewardClaimTime, v'baseWalletCode));
}

(slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $JettonWalletSharded$_to_external(((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell)) v) inline {
    var (v'owner, v'ownerAfterRecovery, v'minter, v'nominee, v'invitor, v'invitor0, v'id, v'balance, v'taxAsTxnFeePercent, v'turnover, v'debts, v'debt, v'insurance, v'invited, v'friends, v'closeFriendsAndVouched, v'closeFriendsCount, v'recoveryVouchersCount, v'pendingRequests, v'followers, v'followings, v'reports, v'reportReason, v'reporterCount, v'disputerCount, v'reportResolutionTime, v'connections, v'terminated, v'active, v'accountInitTime, v'lastTxnTime, v'lastMsgTo, v'version, v'mintable, v'lastRewardClaimTime, v'baseWalletCode) = v; 
    return (v'owner, v'ownerAfterRecovery, v'minter, v'nominee, v'invitor, v'invitor0, v'id, v'balance, v'taxAsTxnFeePercent, v'turnover, v'debts, v'debt, v'insurance, v'invited, v'friends, v'closeFriendsAndVouched, v'closeFriendsCount, v'recoveryVouchersCount, v'pendingRequests, v'followers, v'followings, v'reports, v'reportReason, v'reporterCount, v'disputerCount, v'reportResolutionTime, v'connections, v'terminated, v'active, v'accountInitTime, v'lastTxnTime, v'lastMsgTo, v'version, v'mintable, v'lastRewardClaimTime, v'baseWalletCode);
}

builder $JettonWalletSharded$init$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'owner, v'minter, v'balance) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'minter);
    build_0 = build_0.store_varuint16(v'balance);
    return build_0;
}

(slice, ((slice, slice, int))) $JettonWalletSharded$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'minter = sc_0~load_msg_addr();
    var v'balance = sc_0~load_varuint16();
    return (sc_0, (v'owner, v'minter, v'balance));
}

(slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $JettonWalletSharded$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$JettonWalletSharded$_load();
    }
    else {
        (slice $owner, slice $minter, int $balance) = $sc~$JettonWalletSharded$init$_load();
        $sc.end_parse();
        return $JettonWalletSharded$_contract_init($owner, $minter, $balance);
    }
}

() $JettonWalletSharded$_contract_store((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $JettonWalletSharded$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $JettonWalletSharded$_init_child(slice $owner, slice $minter, int $balance) inline {
    ;; Build init code cell

    ;; Contract Code: JettonWalletSharded
    cell init_code = my_code();

    ;; Build init data cell

    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $JettonWalletSharded$init$_store(b, ($owner, $minter, $balance));
    return (init_code, b.end_cell());
}

;;
;; Contract JettonWalletSharded functions
;;

(slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $JettonWalletSharded$_contract_init(slice $owner, slice $minter, int $balance) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = (null(), null(), null(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), null(), $IdInfo$_constructor_username_lattitude_longitude_address(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c()), null(), 1, 0, null(), 0, $Insurance$_constructor_emi_startStop(0, 0), null(), null(), null(), 0, 0, null(), null(), null(), null(), false, 0, 0, 0, 0, false, false, null(), 0, __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), 0, true, 0, null());
    $self'owner = $owner;
    $self'ownerAfterRecovery = $owner;
    $self'minter = $minter;
    $self'accountInitTime = $global_now();
    $self'balance = 1000000000;
    $self'baseWalletCode = $global_myCode();
    return ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode);
}

() $global_setCode(cell $newCode) impure asm """
    SETCODE
""";

int $global_extractLowBits(int $value, int $count) impure asm """
    MODPOW2
""";

int $global_changeShard(int $hash, int $shard) impure inline {
    return ($global_extractLowBits($hash, 248) | ($shard << 248));
}

builder $Builder$_fun_storeShardedStateInit(builder $self, (cell, cell) $init) impure inline {
    var ($self) = $self;
    var (($init'code, $init'data)) = $init;
    return $Builder$_fun_storeRef($init'data, $Builder$_fun_storeRef($init'code, store_uint(store_uint($self, 40, 6), 6, 4)));
}

(int) $global_contractShardBasechainAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    int $hash = $Cell$_fun_hash($Builder$_fun_endCell($Builder$_fun_storeShardedStateInit($global_beginCell(), ($s'code, $s'data))));
    return $global_newBasechainAddress($hash);
}

slice $global_emptyAddress() impure asm """
    b{00} PUSHSLICE
""";

int $Address$_fun_getShard(slice $self) impure inline {
    var ($self) = $self;
    slice $sl = $Address$_fun_asSlice($self);
    $sl~$Slice$_fun_skipBits(11);
    return $sl~load_uint(8);
}

int $StateInit$_fun_hasSameBasechainAddressWithoutShard((cell, cell) $self, slice $address) impure inline {
    var (($self'code, $self'data)) = $self;
    var (($self'code, $self'data)) = $self;
    int $addressHash = $StdAddress$_get_address($global_parseStdAddress($Address$_fun_asSlice($address)));
    var ($baseAddress'hash) = $global_contractShardBasechainAddress(($self'code, $self'data));
    return ($global_extractLowBits(__tact_not_null($baseAddress'hash), 248) == $global_extractLowBits($addressHash, 248));
}

() $MessageParameters$_fun_send((int, cell, int, slice, int) $self) impure inline {
    var (($self'mode, $self'body, $self'value, $self'to, $self'bounce)) = $self;
    var (($self'mode, $self'body, $self'value, $self'to, $self'bounce)) = $self;
    $global_message(($self'mode, $self'body, $self'value, $self'to, $self'bounce));
}

((int, cell, int, int, (cell, cell)), int) $DeployParameters$_fun_toShard((int, cell, int, int, (cell, cell)) $self, int $shard) impure inline {
    var (($self'mode, $self'body, $self'value, $self'bounce, ($self'init'code, $self'init'data))) = $self;
    var (($self'mode, $self'body, $self'value, $self'bounce, ($self'init'code, $self'init'data))) = $self;
    return $ShardDeployParameters$_constructor_shard_deployParameters($shard, ($self'mode, $self'body, $self'value, $self'bounce, ($self'init'code, $self'init'data)));
}

() $ShardDeployParameters$_fun_send(((int, cell, int, int, (cell, cell)), int) $self) impure inline {
    var ((($self'deployParameters'mode, $self'deployParameters'body, $self'deployParameters'value, $self'deployParameters'bounce, ($self'deployParameters'init'code, $self'deployParameters'init'data)), $self'shard)) = $self;
    var ((($self'deployParameters'mode, $self'deployParameters'body, $self'deployParameters'value, $self'deployParameters'bounce, ($self'deployParameters'init'code, $self'deployParameters'init'data)), $self'shard)) = $self;
    cell $newStateInit = $Builder$_fun_endCell($Builder$_fun_storeShardedStateInit($global_beginCell(), ($self'deployParameters'init'code, $self'deployParameters'init'data)));
    cell $msg = $Builder$_fun_endCell($Builder$_fun_storeMaybeRef($self'deployParameters'body, $Builder$_fun_storeRef($newStateInit, store_uint($Builder$_fun_storeCoins(store_uint(store_uint($Builder$_fun_storeBool($self'deployParameters'bounce, store_uint($global_beginCell(), 1, 2)), 1024, 14), $global_changeShard($Cell$_fun_hash($newStateInit), $self'shard), 256), $self'deployParameters'value), 3, 107))));
    $global_sendRawMessage($msg, $self'deployParameters'mode);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), int) $JettonWalletSharded$_fun_connected((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var $fresh$ret_13 = (( (( (( (( (( equal_slices_bits($self'invitor, $receiver) )) ? (true) : (__tact_dict_exists_slice($self'friends, 267, $receiver)) )) ? (true) : (__tact_dict_exists_slice($self'followings, 267, $receiver)) )) ? (true) : (__tact_dict_exists_slice($self'invited, 267, $receiver)) )) ? (true) : (__tact_dict_exists_slice($self'followers, 267, $receiver)) ) ? true : false);
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_13);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (cell, cell)) $JettonWalletSharded$_fun_getWalletInit((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $address) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var ($walletInit'code, $walletInit'data) = $JettonWalletSharded$_init_child($address, $self'minter, 0);
    var $fresh$ret_25 = $StateInit$_constructor_code_data($self'baseWalletCode, $walletInit'data);
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_25);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_invite((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, slice $forwardPayload) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    throw_unless(250, ($self'connections < 250));
    throw_unless(719, (~ ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_connected($receiver)));
    $ShardDeployParameters$_fun_send($DeployParameters$_fun_toShard($DeployParameters$_constructor_value_mode_body_init(0, 80, $InviteInternal$_store_cell($InviteInternal$_constructor_version_sender_invitor_currentWalletCode_forwardPayload($self'version, $self'owner, $self'invitor, $global_myCode(), $forwardPayload), begin_cell()), ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getWalletInit($receiver)), $Address$_fun_getShard($receiver)));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), int) $JettonWalletSharded$_fun__deductDebt((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $amount) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    int $remaining = $amount;
    int $unAccountedDebt = $self'debt;
    int $noDebts = null?($self'debts);
    if (( (($remaining <= 0)) ? (true) : (( (($unAccountedDebt == 0)) ? ($noDebts) : (false) )) )) {
        var $fresh$ret_14 = $remaining;
        return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_14);
    }
    if (($unAccountedDebt > 0)) {
        if (($remaining >= $unAccountedDebt)) {
            $remaining = $remaining - $unAccountedDebt;
            $self'debt = 0;
        } else {
            $self'debt = ($unAccountedDebt - $remaining);
            $remaining = 0;
            var $fresh$ret_15 = $remaining;
            return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_15);
        }
    }
    ifnot ($noDebts) {
        var ($from, $debtVal, $fresh$flag_16) = __tact_dict_min_slice_coins($self'debts, 267);
        while ($fresh$flag_16) {
            if (($remaining <= 0)) {
                var $fresh$ret_17 = $remaining;
                return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_17);
            }
            int $debt = $debtVal;
            int $pay = 0;
            if (($remaining >= $debt)) {
                $pay = $debt;
            } else {
                $pay = $remaining;
            }
            $debt = $debt - $pay;
            $remaining = $remaining - $pay;
            ifnot ($debt) {
                $self'debts~__tact_dict_delete(267, $from);
            } else {
                $self'debts~__tact_dict_set_slice_coins(267, $from, $debt);
            }
            ($from, $debtVal, $fresh$flag_16) = __tact_dict_next_slice_coins($self'debts, 267, $from);
        }
    }
    var $fresh$ret_18 = $remaining;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_18);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_mintInternal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $amount) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $amount = ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun__deductDebt($amount);
    $self'balance = $self'balance + $amount;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_burnForce((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    if (($amount <= 0)) {
        return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
    }
    if (($self'balance >= $amount)) {
        $self'balance = $self'balance - $amount;
        return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
    }
    int $shortfall = ($amount - $self'balance);
    $self'balance = 0;
    int $prevDebt = 0;
    if (__tact_dict_exists_slice($self'debts, 267, $sender)) {
        $prevDebt = __tact_not_null(__tact_dict_get_slice_coins($self'debts, 267, $sender));
    }
    $self'debts~__tact_dict_set_slice_coins(267, $sender, ($prevDebt + $shortfall));
    $self'turnover = $self'turnover + $amount;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), cell) $JettonWalletSharded$_fun_getJettonWalletInit((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $address) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var ($init'code, $init'data) = ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getWalletInit($address);
    var $fresh$ret_26 = $Builder$_fun_endCell($Builder$_fun_storeShardedStateInit($global_beginCell(), ($init'code, $init'data)));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_26);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), slice) $JettonWalletSharded$_fun_getJettonWalletByOwner((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $jettonWalletOwner) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    cell $init = ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletInit($jettonWalletOwner);
    int $ownerShard = $Address$_fun_getShard($jettonWalletOwner);
    slice $expectedAddr = $Builder$_fun_asSlice(store_uint(store_uint(store_uint($global_beginCell(), 4, 3), 0, 8), $global_changeShard($Cell$_fun_hash($init), $ownerShard), 256));
    var $fresh$ret_27 = $expectedAddr~$Slice$_fun_loadAddress();
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_27);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_internalDeActivate((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $approved) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $self'active = $approved;
    if ($approved) {
        ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_mintInternal(1000000000000);
        $self'connections = $self'connections + 1;
    } else {
        ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($self'invitor, 1000000000000);
        $self'connections = $self'connections - 1;
    }
    $self'lastMsgTo = $self'invitor;
    $MessageParameters$_fun_send($MessageParameters$_constructor_value_mode_to_body(0, 80, ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($self'invitor), $InviteApproval$_store_cell($InviteApproval$_constructor_approved_invitor_invitee_approver($approved, $self'invitor, $self'owner, $sender), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_burn((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $amount) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    int $timeSinceLastTxn = ($global_now() - $self'lastTxnTime);
    int $fee = $global_divc($amount, 1000000000000);
    $amount = $amount + $fee;
    if (($self'insurance'emi > 0)) {
        int $emi = $self'insurance'emi;
        int $pay = $global_muldivc($emi, $timeSinceLastTxn, 2628000000);
        $amount = $amount + $pay;
    }
    $self'balance = $self'balance - $amount;
    throw_unless(709, ($self'balance >= 0));
    $self'turnover = $self'turnover + $amount;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_unInvite((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload)) = $msg;
    throw_unless(721, $self'invited~__tact_dict_delete(267, $receiver));
    int $amount = __tact_not_null(__tact_dict_get_slice_coins($self'invited, 267, $receiver));
    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burn($amount);
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, 80, $UnInviteInternal$_store_cell($UnInviteInternal$_constructor_amount_sender_forwardPayload(($amount / 2), $self'owner, $msg'forwardPayload), begin_cell())));
    $self'lastMsgTo = $receiver;
    $self'connections = $self'connections - 1;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_friendRequest((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, int $amount, slice $payload) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    throw_unless(250, ($self'connections < 250));
    throw_unless(719, (~ ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_connected($receiver)));
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, 80, $FriendRequestInternal$_store_cell($FriendRequestInternal$_constructor_amount_sender_forwardPayload($amount, $self'owner, $payload), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_confirmFRequest((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload)) = $msg;
    throw_unless(706, __tact_dict_exists_slice($self'pendingRequests, 267, $receiver));
    int $amount = __tact_not_null(__tact_dict_get_slice_coins($self'pendingRequests, 267, $receiver));
    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_mintInternal($amount);
    $self'friends~__tact_dict_set_slice_coins(267, $receiver, $amount);
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, 80, $ConfirmRequestInternal$_store_cell($ConfirmRequestInternal$_constructor_amount_sender_forwardPayload($amount, $self'owner, $msg'forwardPayload), begin_cell())));
    $self'lastMsgTo = $receiver;
    $self'pendingRequests~__tact_dict_delete(267, $receiver);
    $self'connections = $self'connections + 1;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_unfriend((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload)) = $msg;
    throw_unless(720, __tact_dict_exists_slice($self'friends, 267, $receiver));
    int $amount = __tact_not_null(__tact_dict_get_slice_coins($self'friends, 267, $receiver));
    $self'friends~__tact_dict_delete(267, $receiver);
    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($receiver, $amount);
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, 80, $UnfriendInternal$_store_cell($UnfriendInternal$_constructor_amount_sender_forwardPayload($amount, $self'owner, $msg'forwardPayload), begin_cell())));
    $self'lastMsgTo = $receiver;
    $self'connections = $self'connections - 1;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_clearAllRequests((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    ifnot (null?($self'pendingRequests)) {
        $self'pendingRequests = null();
    }
    $global_emit(__gen_cell_cell_1578659ce9d42ded1b4154ab3df99f3c88044c9645747e91bfa8135c4392fab2());
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_follow((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, int $amount, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload)) = $msg;
    throw_unless(250, ($self'connections < 250));
    throw_unless(719, (~ ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_connected($receiver)));
    $self'followings~__tact_dict_set_slice_coins(267, $receiver, $amount);
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, 80, $FollowInternal$_store_cell($FollowInternal$_constructor_amount_sender_forwardPayload($amount, $self'owner, $msg'forwardPayload), begin_cell())));
    $self'lastMsgTo = $receiver;
    $self'connections = $self'connections + 1;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_unfollow((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, int $amount, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload)) = $msg;
    throw_unless(717, $self'followings~__tact_dict_delete(267, $receiver));
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, 80, $UnfollowInternal$_store_cell($UnfollowInternal$_constructor_amount_sender_forwardPayload($amount, $self'owner, $msg'forwardPayload), begin_cell())));
    $self'lastMsgTo = $receiver;
    $self'connections = $self'connections - 1;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_unfollowInternal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    throw_unless(707, ($self'reporterCount == 0));
    $self'followers~__tact_dict_delete(267, $sender);
    if (($self'connections > 0)) {
        $self'connections = $self'connections - 1;
    }
    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($sender, $amount);
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_report((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, slice $receiver, int $amount, int $reason, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload)) = $msg;
    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burn($amount);
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, 80, $ReportInternal$_store_cell($ReportInternal$_constructor_amount_reason_sender_forwardPayload($amount, $reason, $sender, $msg'forwardPayload), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_dispute((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload)) = $msg;
    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burn($amount);
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, 80, $DisputeInternal$_store_cell($DisputeInternal$_constructor_amount_sender_forwardPayload($amount, $sender, $msg'forwardPayload), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_disputeInternal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    throw_unless(711, ($self'reporterCount > 0));
    $self'reports~__tact_dict_set_slice_int(267, $sender, false, 1);
    $self'disputerCount = $self'disputerCount + 1;
    $self'reportResolutionTime = ($global_now() + 86400);
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_reportResolution((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $receiver, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload)) = $msg;
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_bounce_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($receiver), 0, false, 80, $ResolutionInternal$_store_cell($ResolutionInternal$_constructor_amount_sender_forwardPayload($msg'amount, $self'owner, $msg'forwardPayload), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_reportResolutionInternal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, (int, slice, slice) $msg) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var (($msg'amount, $msg'sender, $msg'forwardPayload)) = $msg;
    throw_unless(706, ($self'reportResolutionTime > 0));
    throw_unless(735, ($global_now() >= $self'reportResolutionTime));
    int $reporters = $self'reporterCount;
    int $disputers = $self'disputerCount;
    int $reportWinCloseAcc = ($reporters > $disputers);
    int $losersCount = 0;
    if ($reportWinCloseAcc) {
        $losersCount = $disputers;
    } else {
        $losersCount = $reporters;
    }
    int $rewarded = 0;
    var ($addr, $reporter, $fresh$flag_6) = __tact_dict_min_slice_int($self'reports, 267, 1);
    while ($fresh$flag_6) {
        if (( (( ($reporter) ? ($reportWinCloseAcc) : (false) )) ? (true) : (( ((~ $reporter)) ? ((~ $reportWinCloseAcc)) : (false) )) )) {
            int $reward = 0;
            if (($rewarded < $losersCount)) {
                $reward = 2000000000000;
                $rewarded = $rewarded + 1;
            } else {
                $reward = 1000000000000;
            }
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($addr), 0, 1, $JettonTransferInternal$_store_cell($JettonTransferInternal$_constructor_queryId_amount_walletVersion_sender_responseDestination_forwardTonAmount_forwardPayload(0, $reward, $self'version, $self'owner, $self'owner, 0, $msg'forwardPayload), begin_cell())));
        }
        ($addr, $reporter, $fresh$flag_6) = __tact_dict_next_slice_int($self'reports, 267, $addr, 1);
    }
    if ($reportWinCloseAcc) {
        var ($addr, $amount, $fresh$flag_7) = __tact_dict_min_slice_coins($self'followings, 267);
        while ($fresh$flag_7) {
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($addr), 0, 1, $AccCloseBurnInternal$_store_cell($AccCloseBurnInternal$_constructor_amount_sender_forwardPayload($amount, $self'owner, $msg'forwardPayload), begin_cell())));
            ($addr, $amount, $fresh$flag_7) = __tact_dict_next_slice_coins($self'followings, 267, $addr);
        }
        var ($addr, $amount, $fresh$flag_8) = __tact_dict_min_slice_coins($self'followers, 267);
        while ($fresh$flag_8) {
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($addr), 0, 1, $AccCloseBurnInternal$_store_cell($AccCloseBurnInternal$_constructor_amount_sender_forwardPayload($amount, $self'owner, $msg'forwardPayload), begin_cell())));
            ($addr, $amount, $fresh$flag_8) = __tact_dict_next_slice_coins($self'followers, 267, $addr);
        }
        var ($addr, $amount, $fresh$flag_9) = __tact_dict_min_slice_coins($self'friends, 267);
        while ($fresh$flag_9) {
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($addr), 0, 1, $AccCloseBurnInternal$_store_cell($AccCloseBurnInternal$_constructor_amount_sender_forwardPayload(($amount * 2), $self'owner, $msg'forwardPayload), begin_cell())));
            ($addr, $amount, $fresh$flag_9) = __tact_dict_next_slice_coins($self'friends, 267, $addr);
        }
        var ($addr, $amount, $fresh$flag_10) = __tact_dict_min_slice_coins($self'invited, 267);
        while ($fresh$flag_10) {
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($addr), 0, 1, $AccCloseBurnInternal$_store_cell($AccCloseBurnInternal$_constructor_amount_sender_forwardPayload((3 * $amount), $self'owner, $msg'forwardPayload), begin_cell())));
            ($addr, $amount, $fresh$flag_10) = __tact_dict_next_slice_coins($self'invited, 267, $addr);
        }
        $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($self'invitor), 0, 1, $AccCloseBurnInternal$_store_cell($AccCloseBurnInternal$_constructor_amount_sender_forwardPayload(3000000000000, $self'owner, $msg'forwardPayload), begin_cell())));
        ifnot ($self'reportReason) {
            int $payback = 0;
            if (( (($self'insurance'emi > 0)) ? ((($global_now() - $self'accountInitTime) < 1261440000000)) : (false) )) {
                int $emi = $self'insurance'emi;
                $payback = ($global_muldivc(8, ($self'accountInitTime + $self'insurance'startStop), 10) * $emi);
            }
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($self'nominee), 0, 1, $JettonTransferInternal$_store_cell($JettonTransferInternal$_constructor_queryId_amount_walletVersion_sender_responseDestination_forwardTonAmount_forwardPayload(0, ($self'balance + $payback), $self'version, $self'owner, $msg'sender, 0, $msg'forwardPayload), begin_cell())));
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_bounce_body($self'minter, 0, 3, false, $JettonBurnNotification$_store_cell($JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination(0, $payback, $global_emptyAddress(), $msg'sender), begin_cell())));
        }
        var ($addr, $amount, $fresh$flag_11) = __tact_dict_min_slice_coins($self'debts, 267);
        while ($fresh$flag_11) {
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($addr), 0, 1, $AccCloseBurnInternal$_store_cell($AccCloseBurnInternal$_constructor_amount_sender_forwardPayload($amount, $self'owner, $msg'forwardPayload), begin_cell())));
            ($addr, $amount, $fresh$flag_11) = __tact_dict_next_slice_coins($self'debts, 267, $addr);
        }
        $self'terminated = true;
    } else {
        $self'reports = null();
        $self'reportResolutionTime = 0;
        $self'reporterCount = 0;
        $self'disputerCount = 0;
        $self'reportReason = false;
    }
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_claimTon((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    throw_unless(700, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value($self'owner, ($global_myBalance() - 1000000000)));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_startRecovery((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $self'ownerAfterRecovery = $sender;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_vetoRecovery((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $self'ownerAfterRecovery = $self'owner;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_validateRecovery((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    throw_unless(736, __tact_dict_exists_slice($self'closeFriendsAndVouched, 267, $sender));
    throw_unless(737, (~ __tact_not_null(__tact_dict_get_slice_int($self'closeFriendsAndVouched, 267, $sender, 1))));
    if (( (($self'recoveryVouchersCount >= $global_divc($self'closeFriendsCount, 2))) ? ((($global_now() - $self'lastTxnTime) > 86400)) : (false) )) {
        $self'owner = $self'ownerAfterRecovery;
        $self'recoveryVouchersCount = 0;
        var ($friend, $vouched, $fresh$flag_12) = __tact_dict_min_slice_int($self'closeFriendsAndVouched, 267, 1);
        while ($fresh$flag_12) {
            if ($vouched) {
                $self'closeFriendsAndVouched~__tact_dict_set_slice_int(267, $friend, false, 1);
            }
            ($friend, $vouched, $fresh$flag_12) = __tact_dict_next_slice_int($self'closeFriendsAndVouched, 267, $friend, 1);
        }
    } else {
        $self'closeFriendsAndVouched~__tact_dict_set_slice_int(267, $sender, true, 1);
        $self'recoveryVouchersCount = $self'recoveryVouchersCount + 1;
    }
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_requestUpgrade((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $from) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_bounce_mode_body($from, 200000000, false, 17, $RequestUpgradeCode$_store_cell($RequestUpgradeCode$_constructor_version($self'version), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_sendUpgrade((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $to) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_mode_value_bounce_body($to, 3, 200000000, false, $Upgrade$_store_cell($Upgrade$_constructor_sender_walletVersion_newWalletCode($self'owner, $self'version, $global_myCode()), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_voteProposal((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $proposer) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_mode_value_body($self'minter, 64, 0, $VoteProposal$_store_cell($VoteProposal$_constructor_sender_proposer_turnover($self'owner, $proposer, $self'turnover), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_changeNominee((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $nominee) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $self'nominee = $nominee;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_insurance((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $amount) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    int $existingEmi = $self'insurance'emi;
    int $newEmi = 0;
    if (($amount == 401000000)) {
        $self'insurance'emi = 100000000000;
        $newEmi = 100000000000;
    } elseif (($amount == 402000000)) {
        $self'insurance'emi = 500000000000;
        $newEmi = 500000000000;
    } elseif (($amount == 404000000)) {
        $self'insurance'emi = 0;
        return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
    }
    if (($existingEmi > $newEmi)) {
        $self'insurance'startStop = $global_now();
    }
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_correctInternalSender((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var ($wallet'code, $wallet'data) = ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getWalletInit($sender);
    ifnot ($StateInit$_fun_hasSameBasechainAddressWithoutShard(($wallet'code, $wallet'data), __tact_context_get_sender())) {
        throw_unless(700, ( equal_slices_bits($self'minter, __tact_context_get_sender()) ));
        ifnot ($self'active) {
            $self'active = true;
            $self'invitor = $sender;
            $self'invitor0 = $sender;
            $self'connections = $self'connections + 1;
        }
    }
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_syncVersion((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, int $senderVersion) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    if (($senderVersion == $self'version)) {
    } elseif (($senderVersion > $self'version)) {
        ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_requestUpgrade(__tact_context_get_sender());
    } else {
        ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_sendUpgrade(__tact_context_get_sender());
    }
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_notifyOwner((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount, slice $forwardPayload) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    int $myBal = $global_myBalance();
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_bounce_body($self'owner, (($myBal > 5000000000) ? ($myBal - 1000000000) : 10000000), 3, false, $JettonNotification$_store_cell($JettonNotification$_constructor_queryId_amount_sender_forwardPayload(0, $amount, $sender, $forwardPayload), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_notifyRoot((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $approver, int $mint, int $amount) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_bounce_body($self'minter, 100000000, 3, false, $JettonBurnNotification$_store_cell($JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination(0, $amount, $self'owner, ($mint ? $approver : null())), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_changeInvitor((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $new) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    throw_unless(700, ( ~ equal_slices_bits($new, __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c()) ));
    throw_unless(702, $self'active);
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_applyGrant((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self, slice $sender, int $amount) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burn($global_muldivc($amount, 1, 100));
    $MessageParameters$_fun_send($MessageParameters$_constructor_value_mode_to_body(0, 64, $self'minter, $ApplyGrant$_store_cell($ApplyGrant$_constructor_sender_amount($sender, $amount), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), ()) $JettonWalletSharded$_fun_engagementReward((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    int $now = $global_now();
    throw_unless(735, ( (($global_now() > ($self'lastRewardClaimTime + 86400))) ? ((($now - $self'accountInitTime) < 31536000)) : (false) ));
    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_mintInternal(10000000000);
    $self'lastRewardClaimTime = $global_now();
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_bounce_body($self'minter, 10000000, 3, false, $MintNotify$_store_cell($MintNotify$_constructor_amount_sender(10000000000, $self'owner), begin_cell())));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), ());
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (int, slice, slice, cell)) $JettonWalletSharded$_fun_get_wallet_data((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var $fresh$ret_19 = $JettonWalletData$_constructor_balance_owner_minter_code($self'balance, $self'owner, $self'minter, $global_myCode());
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_19);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell)) $JettonWalletSharded$_fun_state((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var $fresh$ret_20 = ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode);
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_20);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), int) $JettonWalletSharded$_fun_reportResolutionTime((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var $fresh$ret_21 = $self'reportResolutionTime;
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_21);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (slice, slice)) $JettonWalletSharded$_fun_getInvitorNominee((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var $fresh$ret_22 = $InvitorNominee$_constructor_invitor_nominee($self'invitor, $self'nominee);
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_22);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (cell, cell, cell, cell, cell, cell, cell)) $JettonWalletSharded$_fun_getFriendsAndFollowings((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    throw_unless(701, (~ $self'terminated));
    var $fresh$ret_23 = $FriendsAndFollowings$_constructor_friends_followings_followers_invited_pendingRequests_debts_reports($self'friends, $self'followings, $self'followers, $self'invited, $self'pendingRequests, $self'debts, $self'reports);
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_23);
}

((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell), (int, int, int, int, int, int, int, int, int, slice, cell)) $JettonWalletSharded$_fun_otherConsts((slice, slice, slice, slice, slice, slice, (slice, slice, slice, slice), int, int, int, cell, int, (int, int), cell, cell, cell, int, int, cell, cell, cell, cell, int, int, int, int, int, int, int, int, int, slice, int, int, int, cell) $self) impure inline {
    var (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)) = $self;
    var $fresh$ret_24 = $OtherStateConsts$_constructor_reportReason_reporterCount_disputerCount_reportResolutionTime_connections_terminated_mbrpAmount_closureWait_active_lastMsgTo_insurance($self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, 1000000000000, 86400, $self'active, $self'lastMsgTo, $Insurance$_store_cell(($self'insurance'emi, $self'insurance'startStop), begin_cell()));
    return (($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), $fresh$ret_24);
}

;;
;; Get methods of a Contract JettonWalletSharded
;;

_ %get_wallet_data() method_id(97026) {
    var self = $JettonWalletSharded$_contract_load();
    var res = self~$JettonWalletSharded$_fun_get_wallet_data();
    return $JettonWalletData$_to_external(res);
}

_ %state() method_id(77589) {
    var self = $JettonWalletSharded$_contract_load();
    var res = self~$JettonWalletSharded$_fun_state();
    return $JettonWalletSharded$_to_external(res);
}

_ %reportResolutionTime() method_id(127713) {
    var self = $JettonWalletSharded$_contract_load();
    var res = self~$JettonWalletSharded$_fun_reportResolutionTime();
    return res;
}

_ %getInvitorNominee() method_id(91960) {
    var self = $JettonWalletSharded$_contract_load();
    var res = self~$JettonWalletSharded$_fun_getInvitorNominee();
    return $InvitorNominee$_to_external(res);
}

_ %getFriendsAndFollowings() method_id(124425) {
    var self = $JettonWalletSharded$_contract_load();
    var res = self~$JettonWalletSharded$_fun_getFriendsAndFollowings();
    return $FriendsAndFollowings$_to_external(res);
}

_ %otherConsts() method_id(118554) {
    var self = $JettonWalletSharded$_contract_load();
    var res = self~$JettonWalletSharded$_fun_otherConsts();
    return $OtherStateConsts$_to_external(res);
}

;;
;; Routing of a Contract JettonWalletSharded
;;

;; message opcode reader utility: binary receivers and empty fallback receiver
;; Returns 32 bit message opcode, or returns immediately if the message is shorter than 32 bits
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ IFNOTRET";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode) = $JettonWalletSharded$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF prefix of a bounced message
        in_msg~skip_bits(32);
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg~load_uint(32);
        }
        ;; Bounced handler for InviteApproval message
        if (op == 0x44) {
            var ($msg'approved) = in_msg~$InviteApproval$_load_bounced();
            $self'active = (~ $msg'approved);
            ifnot ($msg'approved) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_mintInternal(1000000000000);
                $self'connections = $self'connections + 1;
            } else {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($self'lastMsgTo, 1000000000000);
                $self'connections = $self'connections - 1;
            }
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for UnInviteInternal message
        if (op == 0x34) {
            var ($msg'amount) = in_msg~$UnInviteInternal$_load_bounced();
            int $amount = (2 * $msg'amount);
            $self'invited~__tact_dict_set_slice_coins(267, $self'lastMsgTo, $amount);
            $self'balance = $self'balance + $amount;
            $self'connections = $self'connections + 1;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for ConfirmRequestInternal message
        if (op == 7) {
            var ($msg'amount) = in_msg~$ConfirmRequestInternal$_load_bounced();
            slice $last = $self'lastMsgTo;
            $self'friends~__tact_dict_delete(267, $last);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($last, $msg'amount);
            $self'pendingRequests~__tact_dict_set_slice_coins(267, $last, $msg'amount);
            $self'connections = $self'connections - 1;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for UnfriendInternal message
        if (op == 0x31) {
            var ($msg'amount) = in_msg~$UnfriendInternal$_load_bounced();
            slice $last = $self'lastMsgTo;
            $self'friends~__tact_dict_set_slice_coins(267, $last, $msg'amount);
            $self'balance = $self'balance + $msg'amount;
            $self'connections = $self'connections + 1;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for FollowInternal message
        if (op == 0x17) {
            var ($msg'amount) = in_msg~$FollowInternal$_load_bounced();
            $self'followings~__tact_dict_delete(267, $self'lastMsgTo);
            $self'connections = $self'connections - 1;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for UnfollowInternal message
        if (op == 5) {
            var ($msg'amount) = in_msg~$UnfollowInternal$_load_bounced();
            $self'followings~__tact_dict_set_slice_coins(267, $self'lastMsgTo, $msg'amount);
            $self'connections = $self'connections + 1;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for ReportInternal message
        if (op == 8) {
            var ($msg'amount, $msg'reason) = in_msg~$ReportInternal$_load_bounced();
            $self'balance = $self'balance + $msg'amount;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for DisputeInternal message
        if (op == 9) {
            var ($msg'amount) = in_msg~$DisputeInternal$_load_bounced();
            $self'balance = $self'balance + $msg'amount;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for AccCloseBurnInternal message
        if (op == 0x35) {
            var ($msg'amount) = in_msg~$AccCloseBurnInternal$_load_bounced();
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for JettonTransferInternal message
        if (op == 0x178d4519) {
            var ($msg'queryId, $msg'walletVersion, $msg'amount) = in_msg~$JettonTransferInternal$_load_bounced();
            if (($msg'amount >= 1000000000)) {
                $self'balance = $self'balance + $msg'amount;
            }
            $global_cashback($self'owner);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Bounced handler for JettonBurnNotification message
        if (op == 0x7bdd97de) {
            var ($msg'queryId, $msg'amount) = in_msg~$JettonBurnNotification$_load_bounced();
            $self'balance = $self'balance + $msg'amount;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        return ();
    }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg.preload_uint(32);
        ;; Receive JettonTransfer message
        if (op == 0xf8a7ea5) {
            in_msg~skip_bits(32);
            var $msg'queryId = in_msg~load_uint(64);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'destination = in_msg~load_msg_addr();
            var $msg'responseDestination = in_msg~__tact_load_address_opt();
            var $msg'customPayload = in_msg~load_maybe_ref();
            var $msg'forwardTonAmount = in_msg~load_varuint16();
            var $msg'forwardPayload = in_msg;
            slice $sender = __tact_context_get_sender();
            throw_unless(700, ( equal_slices_bits($sender, $self'owner) ));
            throw_unless(702, ( ($self'active) ? (true) : (($msg'amount < 1000000000)) ));
            $global_forceBasechain($msg'destination);
            throw_unless(739, ($Slice$_fun_bits($msg'forwardPayload) >= 1));
            if (($msg'amount >= 1000000000)) {
                $self'lastTxnTime = $global_now();
                if (( ~ equal_slices_bits($msg'destination, $self'minter) )) {
                    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burn($msg'amount);
                } else {
                    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_applyGrant($sender, $msg'amount);
                    $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                    return ();
                }
            } elseif (($msg'amount == 100000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_invite($msg'destination, $msg'forwardPayload);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 200000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_friendRequest($msg'destination, 2000000000000, $msg'forwardPayload);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 300000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_confirmFRequest($msg'destination, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 400000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_changeNominee($msg'destination);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 500000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_follow($msg'destination, 1000000000000, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 600000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_report($sender, $msg'destination, 1000000000000, true, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 700000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_report($sender, $msg'destination, 1000000000000, false, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 800000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_dispute($sender, 1000000000000, $msg'destination, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 900000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_reportResolution($msg'destination, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 110000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_clearAllRequests();
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 120000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_unfollow($msg'destination, 1000000000000, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 130000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_unInvite($msg'destination, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 140000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_unfriend($msg'destination, ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload));
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 150000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_changeInvitor($msg'destination);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 160000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_vetoRecovery();
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 20000000)) {
                throw_unless(704, false);
            } elseif (( (($msg'amount == 980000000)) ? (true) : (($msg'amount == 101000000)) )) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burn(100000000000);
            } elseif (($msg'amount == 990000000)) {
                $self'closeFriendsAndVouched~__tact_dict_set_slice_int(267, $msg'destination, false, 1);
                $self'closeFriendsCount = $self'closeFriendsCount + 1;
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 102000000)) {
                $self'closeFriendsAndVouched~__tact_dict_delete(267, $msg'destination);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 999000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_requestUpgrade($self'minter);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 501000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_voteProposal($msg'destination);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (( (( (($msg'amount == 401000000)) ? (true) : (($msg'amount == 402000000)) )) ? (true) : (($msg'amount == 404000000)) )) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_insurance($msg'amount);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 444000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_claimTon();
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 111000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_engagementReward();
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } elseif (($msg'amount == 230000000)) {
                throw_unless(702, $self'active);
            }
            $ShardDeployParameters$_fun_send($DeployParameters$_fun_toShard($DeployParameters$_constructor_value_mode_body_init(0, 80, $JettonTransferInternal$_store_cell($JettonTransferInternal$_constructor_queryId_walletVersion_amount_sender_responseDestination_forwardTonAmount_forwardPayload($msg'queryId, $self'version, $msg'amount, $sender, null(), 0, $msg'forwardPayload), begin_cell()), ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getWalletInit($msg'destination)), $Address$_fun_getShard($msg'destination)));
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive JettonTransferInternal message
        if (op == 0x178d4519) {
            in_msg~skip_bits(32);
            var $msg'queryId = in_msg~load_uint(64);
            var $msg'walletVersion = in_msg~load_uint(10);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'responseDestination = in_msg~__tact_load_address_opt();
            var $msg'forwardTonAmount = in_msg~load_varuint16();
            var $msg'forwardPayload = in_msg;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_syncVersion($msg'walletVersion);
            if (($msg'amount >= 1000000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_mintInternal($msg'amount);
            } elseif (($msg'amount == 20000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($msg'sender, 1000000000000);
            } elseif (($msg'amount == 980000000)) {
                $self'balance = $self'balance + 100000000000;
            } elseif (($msg'amount == 101000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_startRecovery($msg'sender);
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_mintInternal(100000000000);
            } elseif (($msg'amount == 103000000)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_validateRecovery($msg'sender);
            } elseif (( ((~ null?($self'invitor0))) ? (( equal_slices_bits($msg'sender, __tact_not_null($self'invitor0)) )) : (false) )) {
                int $approved = true;
                if (($msg'amount == 240000000)) {
                    $approved = false;
                }
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_internalDeActivate($msg'sender, $approved);
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            } else {
                $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
                return ();
            }
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $msg'forwardPayload);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive InviteInternal message
        if (op == 1) {
            in_msg~skip_bits(32);
            var $msg'version = in_msg~load_uint(10);
            slice sc_1 = in_msg~load_ref().begin_parse();
            var $msg'id = sc_1~load_int(1) ? $IdInfo$_as_optional(sc_1~$IdInfo$_load()) : null();
            var $msg'sender = sc_1~load_msg_addr();
            var $msg'invitor = sc_1~load_msg_addr();
            var $msg'currentWalletCode = sc_1~load_ref();
            var $msg'forwardPayload = sc_1;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            throw_unless(723, (~ $self'active));
            $self'invitor = $msg'sender;
            $self'nominee = $msg'sender;
            $self'invitor0 = $msg'invitor;
            if (($msg'version > $self'version)) {
                $self'version = $msg'version;
                $global_setCode($msg'currentWalletCode);
            } elseif (($msg'version < $self'version)) {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_sendUpgrade(__tact_context_get_sender());
            }
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'invitor, 1000000000000, $msg'forwardPayload);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive InviteApproval message
        if (op == 0x44) {
            in_msg~skip_bits(32);
            var $msg'approved = in_msg~load_int(1);
            var $msg'invitor = in_msg~load_msg_addr();
            var $msg'invitee = in_msg~load_msg_addr();
            var $msg'approver = in_msg~load_msg_addr();
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'invitee);
            int $amount = 2000000000000;
            if ($msg'approved) {
                $self'invited~__tact_dict_set_slice_coins(267, $msg'invitee, $amount);
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_mintInternal($amount);
                $self'connections = $self'connections + 1;
            } else {
                $self'invited~__tact_dict_delete(267, $msg'invitee);
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($msg'invitee, $amount);
                $self'connections = $self'connections - 1;
            }
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'invitee, $amount, $Cell$_fun_asSlice(__gen_cell_cell_96b2c0769fd3a57db2ff2d4cd22e0c186536426b787eb73f5e7085022dbaf245()));
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyRoot($msg'approver, $msg'approved, 3000000000000);
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_bounce_body($msg'invitee, 10000000, 3, false, $JettonNotification$_store_cell($JettonNotification$_constructor_queryId_amount_sender_forwardPayload(0, 1000000000000, $self'owner, $Cell$_fun_asSlice(__gen_cell_cell_1d8b56da4810b1ea471094662f85900587ba21c6b747b2ca67fdc32640104df3())), begin_cell())));
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_bounce_body($self'minter, 10000000, 3, false, $InviteApproval$_store_cell($InviteApproval$_constructor_approved_invitor_invitee_approver($msg'approved, $self'owner, $msg'invitee, $msg'approver), begin_cell())));
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive UnInviteInternal message
        if (op == 0x34) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            throw_unless(721, ( equal_slices_bits($self'invitor, $msg'sender) ));
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            $self'active = false;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($msg'sender, $msg'amount);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive FriendRequestInternal message
        if (op == 6) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            throw_unless(250, ($self'connections < 250));
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            $self'pendingRequests~__tact_dict_set_slice_coins(267, $msg'sender, $msg'amount);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive ConfirmRequestInternal message
        if (op == 7) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_mintInternal($msg'amount);
            $self'friends~__tact_dict_set_slice_coins(267, $msg'sender, $msg'amount);
            $self'connections = $self'connections + 1;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive UnfriendInternal message
        if (op == 0x31) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            $self'friends~__tact_dict_delete(267, $msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burnForce($msg'sender, $msg'amount);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive FollowInternal message
        if (op == 0x17) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            throw_unless(250, ($self'connections < 250));
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            $self'balance = $self'balance + 1000000000000;
            $self'followers~__tact_dict_set_slice_coins(267, $msg'sender, 1000000000000);
            $self'connections = $self'connections + 1;
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive UnfollowInternal message
        if (op == 5) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_unfollowInternal($msg'sender, $msg'amount);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive ReportInternal message
        if (op == 8) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'reason = in_msg~load_int(1);
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            if ($msg'reason) {
                $self'reportReason = $msg'reason;
            }
            throw_unless(702, $self'active);
            throw_unless(710, (~ __tact_dict_exists_slice($self'reports, 267, $msg'sender)));
            $self'reports~__tact_dict_set_slice_int(267, $msg'sender, true, 1);
            $self'reporterCount = $self'reporterCount + 1;
            $self'reportResolutionTime = ($global_now() + 86400);
            ifnot ($self'reporterCount) {
                $self'terminated = true;
                $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_body(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($self'invitor), 4000000, $JettonTransferInternal$_store_cell($JettonTransferInternal$_constructor_queryId_amount_walletVersion_sender_responseDestination_forwardTonAmount_forwardPayload(0, 20000000, $self'version, $self'owner, $msg'sender, 0, $msg'forwardPayload), begin_cell())));
            }
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive DisputeInternal message
        if (op == 9) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_disputeInternal($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive ResolutionInternal message
        if (op == 10) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            slice $forwardPayload = $msg'forwardPayload;
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender($msg'sender);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_reportResolutionInternal($ResolutionInternal$_tensor_cast(($msg'amount, $msg'sender, $msg'forwardPayload)));
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_notifyOwner($msg'sender, $msg'amount, $forwardPayload);
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive AccCloseBurnInternal message
        if (op == 0x35) {
            in_msg~skip_bits(32);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'sender = in_msg~load_msg_addr();
            var $msg'forwardPayload = in_msg;
            try {
                ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_burn($msg'amount);
            } catch (_, $e) {
                $self'debt = $self'debt + $msg'amount;
            }
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive ProvideWalletBalance message
        if (op == 0x7ac8d559) {
            in_msg~skip_bits(32);
            var $msg'receiver = in_msg~load_msg_addr();
            var $msg'includeVerifyInfo = in_msg~load_int(1);
            throw_unless(701, (~ $self'terminated));
            tuple $info = null();
            if ($msg'includeVerifyInfo) {
                $info = $VerifyInfo$_as_optional($VerifyInfo$_constructor_minter_owner_code($self'minter, $self'owner, $global_myCode()));
            }
            $MessageParameters$_fun_send($MessageParameters$_constructor_body_to_value_mode($TakeWalletBalance$_store_cell($TakeWalletBalance$_constructor_balance_verifyInfo($self'balance, $info), begin_cell()), $msg'receiver, 0, 64));
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive JettonBurn message
        if (op == 0x595f07bc) {
            in_msg~skip_bits(32);
            var $msg'queryId = in_msg~load_uint(64);
            var $msg'amount = in_msg~load_varuint16();
            var $msg'responseDestination = in_msg~__tact_load_address_opt();
            var $msg'customPayload = in_msg~load_maybe_ref();
            throw_unless(701, (~ $self'terminated));
            throw_unless(700, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
            $self'balance = $self'balance - $msg'amount;
            throw_unless(709, ($self'balance >= 0));
            var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
            int $fwdFee = $Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw));
            throw_unless(703, ($ctx'value > ($fwdFee + (2 * $global_getComputeFee(8000, false)))));
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode_bounce_body($self'minter, 0, 64, true, $JettonBurnNotification$_store_cell($JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination($msg'queryId, $msg'amount, $self'owner, $msg'responseDestination), begin_cell())));
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive ClaimTON message
        if (op == 0x393b1ce) {
            in_msg~skip_bits(32);
            var $msg'receiver = in_msg~load_msg_addr();
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_claimTon();
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive RequestUpgradeCode message
        if (op == 0x38) {
            in_msg~skip_bits(32);
            var $msg'version = in_msg~load_uint(10);
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_sendUpgrade(__tact_context_get_sender());
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive Upgrade message
        if (op == 0x2508d66a) {
            in_msg~skip_bits(32);
            var $msg'rootVersion = in_msg~load_int(1) ? in_msg~load_uint(10) : null();
            var $msg'walletVersion = in_msg~load_int(1) ? in_msg~load_uint(10) : null();
            var $msg'sender = in_msg~__tact_load_address_opt();
            var $msg'newRootData = in_msg~load_maybe_ref();
            var $msg'newRootCode = in_msg~load_maybe_ref();
            slice sc_1 = in_msg~load_ref().begin_parse();
            var $msg'newWalletData = sc_1~load_maybe_ref();
            var $msg'newWalletCode = sc_1~load_maybe_ref();
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_correctInternalSender(__tact_not_null($msg'sender));
            if (($self'version < __tact_not_null($msg'walletVersion))) {
                $self'version = __tact_not_null($msg'walletVersion);
                $global_setCode(__tact_not_null($msg'newWalletCode));
                var ($invited, $fresh$underscore_29, $fresh$flag_28) = __tact_dict_min_slice_coins($self'invited, 267);
                while ($fresh$flag_28) {
                    ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_sendUpgrade(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_getJettonWalletByOwner($invited));
                    ($invited, $fresh$underscore_29, $fresh$flag_28) = __tact_dict_next_slice_coins($self'invited, 267, $invited);
                }
            }
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
        ;; Receive UpgradeReqFromMainnet message
        if (op == 0x47) {
            in_msg~skip_bits(32);
            var $msg'sender = in_msg~load_msg_addr();
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_mode_value_bounce_body($msg'sender, 3, 200000000, false, $Upgrade$_store_cell($Upgrade$_constructor_sender_walletVersion_newWalletData_newWalletCode($self'owner, $self'version, $JettonWalletSharded$_store_cell(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode), begin_cell().store_uint(1, 1)), $global_myCode()), begin_cell())));
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
        
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
        return ();
    }
    ;; Empty Receiver and Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        ;; Receive "claim" message
        if (text_op == 0x535d44514554aee036c09a39063fe878ca30a50cb9b5f8f6f1ec24f13e3169e9) {
            ($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode)~$JettonWalletSharded$_fun_claimTon();
            $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
            return ();
        }
    }
    ;; Receiver fallback
    $JettonWalletSharded$_contract_store(($self'owner, $self'ownerAfterRecovery, $self'minter, $self'nominee, $self'invitor, $self'invitor0, ($self'id'username, $self'id'lattitude, $self'id'longitude, $self'id'address), $self'balance, $self'taxAsTxnFeePercent, $self'turnover, $self'debts, $self'debt, ($self'insurance'emi, $self'insurance'startStop), $self'invited, $self'friends, $self'closeFriendsAndVouched, $self'closeFriendsCount, $self'recoveryVouchersCount, $self'pendingRequests, $self'followers, $self'followings, $self'reports, $self'reportReason, $self'reporterCount, $self'disputerCount, $self'reportResolutionTime, $self'connections, $self'terminated, $self'active, $self'accountInitTime, $self'lastTxnTime, $self'lastMsgTo, $self'version, $self'mintable, $self'lastRewardClaimTime, $self'baseWalletCode));
}
