// automatically generated from `@stdlib/std/stdlib.fc` `/home/zeta/connected/ton/fossfiatContract/build/Dns/tact_SimpleDNSFactory.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $FactoryDeploy$_store
  DECLPROC $FactoryDeploy$_store_cell
  DECLPROC $SimpleDNSFactory$_store
  DECLPROC $SimpleDNSFactory$_load
  DECLPROC $Context$_get_value
  DECLPROC $Dns$init$_store
  DECLPROC $SimpleDNSFactory$_contract_init
  DECLPROC $SimpleDNSFactory$_contract_load
  DECLPROC $SimpleDNSFactory$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $Dns$_init_child
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $SimpleDNSFactory$_fun_notify
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC $SendParameters$_constructor_bounce_to_value_mode_code_data_body
  DECLPROC $FactoryDeploy$_constructor_queryId_cashback
  DECLPROC dns_string_to_internal
  DECLPROC dns_internal_verify
  DECLPROC dns_internal_normalize
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $FactoryDeploy$_store PROCINLINE:<{
    1829761339 PUSHINT
    s0 s3 XCHG2
    32 STU
    64 STU
    STSLICE
  }>
  $FactoryDeploy$_store_cell PROCINLINE:<{
    -ROT
    $FactoryDeploy$_store INLINECALLDICT
    ENDC
  }>
  $SimpleDNSFactory$_store PROCINLINE:<{
    SWAP
    64 STU
  }>
  $SimpleDNSFactory$_load PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $Dns$init$_store PROCINLINE:<{
    s0 s2 XCHG
    STSLICE
    257 PUSHINT
    STIX
  }>
  $SimpleDNSFactory$_contract_init PROCINLINE:<{
    0 PUSHINT
  }>
  $SimpleDNSFactory$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $SimpleDNSFactory$_load INLINECALLDICT
      NIP
    }>ELSE<{
      DROP
      $SimpleDNSFactory$_contract_init INLINECALLDICT
    }>
  }>
  $SimpleDNSFactory$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    SWAP
    $SimpleDNSFactory$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $Dns$_init_child PROCREF:<{
        B{b5ee9c7201023a01000e2c0003e6ff008e88f4a413f4bcf2c80bed53208f5e30eda2edfb01d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e14fa40d200d200d200552003f404f4040645556c168e13fa40810101d7005902d101306d6d7f7f7f4034e207925f07e025d749c21fe30005f90120e1ed43d90102030201620b0c045205d31f218210b89f6610bae302218210d294b726bae302218210946a98b6bae3022182106d0ff13bba2122232404e282f0bc11327417bcdfc895e7a19b74fe433f6cfb94ccaa3ed4123aee1d790cde56a0bae3022082f0e1eefb71aeeaf14b43a62dac1f6280d8d53b58b7e1c1d34da3edf6be3e54db3abae3022082f07186c682243006c4affc62e682b3008c35ab2a1628526015a552122a9a2e34eebae3020405060702ce3010355512db3c8163e124f2f470f842708100a088146d50436d5023c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00c87f01ca0055505056ce55205023ca00ca00ca00f400f400c9ed54350803863010355512db3c8167465005f2f470547032c8552082106cd59be65004cb1f035023ca00ca00ca00c9c88258c000000000000000000000000101cb67ccc970fb00881535320903863010355512db3c8167465004f2f470547402c8552082106cd59be65004cb1f035023ca00ca00ca00c9c88258c000000000000000000000000101cb67ccc970fb00881435320903da82f08921f8407d29655e3eec273042707a113588d4c5f254ccf529408f7637154e49ba8fc210355512db3c8167465003f2f470547430c8552082106cd59be65004cb1f035023ca00ca00ca00c9c88258c000000000000000000000000101cb67ccc970fb008813e05f06f2c082353209002c00000000436f6e74726163742064657374726f79656401caf8427ff8276f10f8416f24135f03a1821005f5e100b98e2a821005f5e10070fb0270500381008201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb008e20705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00e20a0036c87f01ca0055505056ce55205023ca00ca00ca00f400f400c9ed540105a0009d0d0201200f1001f6eda2edfb20d74ac300923070e020d74920a93802c300925b70e020c000925b7fe0ab02707f70038e4e03d30721c0008e133133c000945b70db31e0943070db31e070707f8e2f3320c02d21c22f22c13ab05210b122c26003c17b13b012b1b3955f0470db31e05204b0955f0370db31e07001a44033e212e43032700e000801b3b0ba0201201112020120181902012013140171b851ded44d0d200018e14fa40d200d200d200552003f404f4040645556c168e13fa40810101d7005902d101306d6d7f7f7f4034e2db3c6c618170171b7e8bda89a1a400031c29f481a401a401a400aa4007e809e8080c8aaad82d1c27f481020203ae00b205a20260dadafefefe8069c5b678d8c70150171b58d7da89a1a400031c29f481a401a401a400aa4007e809e8080c8aaad82d1c27f481020203ae00b205a20260dadafefefe8069c5b678d8c301600065474320002200002250171bbddbed44d0d200018e14fa40d200d200d200552003f404f4040645556c168e13fa40810101d7005902d101306d6d7f7f7f4034e2db3c6c6181a0175ba30ced44d0d200018e14fa40d200d200d200552003f404f4040645556c168e13fa40810101d7005902d101306d6d7f7f7f4034e25515db3c6c6281b00022101507022d70b07973001d307310178df815e6123f04ef2f45570db3c08a05007106710561045103410231c047421d7498e8701d7497058db3ce121db3c830721f901255959f40e6fa192306ddf206eb38e8c3331d74901206ef2d080db3ce05b21d74902f90101201d1e1f010c20db3cd71830250018c88200ba9301cb0f01cf16c90104db3c20008e830754451359f40f6fa192306ddf206e92306d9cd0d401d001f404596c126f02e2206e925b6de0219931206ef2d0806f2231e1206ef2d0806f223183075859f40f6fa192306ddf04a631d401d001d72c01916d93fa4001e2315067db3c26db3c8158a8216eb3f2f420206ef2d080db3c8158a822206ef2d080d74958baf2f4206ef2d080f9012183072259f40e6fa192306ddf206eb392296e9170e235292526039831d401d001810101d700f404301056104610364678db3c26db3c8158a8216eb3f2f4206ef2d080f9012283072259f40f6fa192306ddf206e92306d9cd0d401d001f404596c126f02e2206eb335292a01fc31d33f30c8018210aff90f5758cb1fcb3fc910461035443012f84270f8276f10f8416f24135f03a1821005f5e100b98e2a821005f5e10070fb0270500381008201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb008e20705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00e23903e08ec031d33ffa403001c8018210aff90f5758cb1fcb3fc910571046103510241023706ddb3cc87f01ca0055505056ce55205023ca00ca00ca00f400f400c9ed54db31e0018210819dbe99ba8f21d33ffa40305067db3c355156c8598210327b2b4a5003cb1fcb3fcec91035443012e0053435360034709e01d30701c000209402a60802df12e631815e6121c300f2f404c68f4b303881540f24f2f4830758086d206e953059f45b30944133f416e205c8018210b5f1b4b558cb1f01c8cecdc9c88258c000000000000000000000000101cb67ccc970fb0088104610354430e0206e93296eb39170e2e302206eb393296eb39170e23236272802a6308200abb926f2f483075119206e953059f45b30944133f416e207206ef2d08016c8598210ff1b3b145003cb1f01c8cecdcec9c88258c000000000000000000000000101cb67ccc970fb008810461035443012323603d28f5e8200abb925f2f412830754103a206e953059f45b30944133f416e201206ef2d08008206ef2d0804780c855208210ab7c80bd5004cb1f02c8ce12cdcecec9c88258c000000000000000000000000101cb67ccc970fb008810461035443012e05b3636f2c086551332363901b6eda2edfb20d749c00821d74ac000b08e1220d70b07c02e9a30c87001cb07c9d0db31e0de6dc87f7f707f8ae630313403935f036de002b3926f029131e2c8016f2259cf1793216eb39b016f22705003cb0701cf17e87032cb07c9d02b0248e30ff2c0865522c87f01ca0055505056ce55205023ca00ca00ca00f400f400c9ed54db312c2d00f026d749c0008e1b3025d74a20c001953005d430d09ac201955f066ddb31e005e20570de208e4f313204d30721c02d22c02e5cb124c22f25c13ab0b124c26025c17bb0b1b35382b0b1955f086ddb31e08e12325055b1955f046ddb31e0026f02c8707f7f9b3670027005cb0703054664e21045035024de20b30374206ef2d0806f222083072c59f40f6fa192306ddf206eb3922c6e9170e2e302206eb3932c6eb39170e2e3026e932b6eb39170e2e3025f033636362e2f3003fe30296eb38f798200abb926f2f4276d830753bc206e953059f45b30944133f417e2830759c85901c8ce12cdf400c9103412206e953059f45b30944133f417e208206ef2d0804670c855208210a61ddcfd5004cb1f02c8ce12cd810101cf00ccc9c88258c000000000000000000000000101cb67ccc970fb008810364540433032363302de303b81540f26f2f40a83072a6d206e953059f45b30944133f417e2830750bbc85901c8ce12cdf400c9102a206e953059f45b30944133f417e25056c8598210ff9494f15003cb1f01c8cecd810101cf00c9c88258c000000000000000000000000101cb67ccc970fb00881036454013323602fe8200d92627f2f401830753cd206e953059f45b30944133f417e283075033c85901c8ce12cdf400c91513206e953059f45b30944133f417e202206ef2d08009206ef2d08010374890c855308210ef2db8835005cb1f03c8ce13cd810101cf00ccccc9c88258c000000000000000000000000101cb67ccc970fb008810364540323102ee8200abb928f2f4830753bc206e953059f45b30944133f417e2830759c85901c8ce12cdf400c9103412206e953059f45b30944133f417e208206ef2d0804670c855208210a61ddcfd5004cb1f02c8ce12cd810101cf00ccc9c88258c000000000000000000000000101cb67ccc970fb0088103645404330323601cc13f8427ff8276f10f8416f24135f03a1821005f5e100b98e2a821005f5e10070fb0270500381008201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb008e20705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00e239000c000000004f4b000ae03036363601f6206e8e6230f8416f24135f03f8276f1001a1821005f5e100b98e2a821005f5e10070fb0202705881008201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00e0027058804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00e0f8416f24135f03f8276f1001a1821005f5e100b9370010f84226c705f2e08401caf8427ff8276f10f8416f24135f03a1821005f5e100b98e2a821005f5e10070fb0270500381008201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb008e20705003804201503304c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00e23901fe8e58821005f5e10070fb028100827022206ef2d0806f223003206ef2d0806f2231102544301056434315c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00e070804222206ef2d0806f223003206ef2d0806f22311046104544301036552212c8cf8580380058ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00003ac87f01ca0055505056ce55205023ca00ca00ca00f400f400c9ed54db31} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    2SWAP
    $Dns$init$_store INLINECALLDICT
    ENDC
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $SimpleDNSFactory$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    FALSE
        BALANCE FIRST
    __tact_context_get INLINECALLDICT
    $Context$_get_value INLINECALLDICT
    SUB
    100000000 PUSHINT
    LESS
    IF:<{
      100000000 PUSHINT
      0 PUSHINT
          RAWRESERVE
      0 PUSHINT
      s0 s3 XCHG2
      130 PUSHINT
      SWAP
      $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
          STZEROES
          // → Stack state
          // s0: Builder
          // s1: `body`
          // s2: `mode`
          STDICT
          ENDC
          SWAP
          SENDRAWMSG
    }>ELSE<{
      0 PUSHINT
      s0 s3 XCHG2
      66 PUSHINT
      SWAP
      $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
          STZEROES
          // → Stack state
          // s0: Builder
          // s1: `body`
          // s2: `mode`
          STDICT
          ENDC
          SWAP
          SENDRAWMSG
    }>
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  $SendParameters$_constructor_bounce_to_value_mode_code_data_body PROCINLINE:<{
    s3 s6 XCHG
    s4 s5 s5 XCHG3
    s0 s3 XCHG
  }>
  $FactoryDeploy$_constructor_queryId_cashback PROCINLINE:<{
  }>
  dns_string_to_internal PROCREF:<{
    c2 SAVE
    SAMEALTSAVE
    DUP
    SBITS
    8 EQINT
    OVER
    SREFS
    0 EQINT
    AND
    IF:<{
      DUP
      8 PLDU
      46 EQINT
      IFJMP:<{
        DROP
        NEWC
        0 PUSHINT
        SWAP
        8 STU
        ENDC
        CTOS
        RETALT
      }>
    }>
    PUSHNULL
    NEWC
    TRUE
    TRUE
    FALSE
    TRUE
    UNTIL:<{
      s6 PUSH
      SBITS
      0 EQINT
      IF:<{
        DROP
        s5 PUSH
        SREFS
        DUP
        1 EQINT
        IF:<{
          DROP
          s0 s5 XCHG
          LDREF
          DROP
          CTOS
        }>ELSE<{
          1 GTINT
          IFJMP:<{
            6 BLKDROP
            PUSHNULL
            RETALT
          }>
          s0 s5 XCHG
        }>
        s0 s5 XCHG
        FALSE
      }>
      DUP
      IF:<{
        NIP
        s2 POP
        s0 s4 XCHG
        8 LDU
        OVER
        45 EQINT
        s2 PUSH
        46 EQINT
        2DUP
        OR
        s4 PUSH
        47 GTINT
        s5 PUSH
        58 LESSINT
        AND
        OR
        s4 PUSH
        96 GTINT
        s5 PUSH
        123 LESSINT
        AND
        OR
        NOT
        s8 s2 PUSH2
        AND
        OR
        IFJMP:<{
          8 BLKDROP
          PUSHNULL
          RETALT
        }>
        IF:<{
          s2 POP
          s5 s5 XCHG2
          OR
          IFJMP:<{
            4 BLKDROP
            PUSHNULL
            RETALT
          }>
          s0 s2 XCHG
          CONS
          NEWC
          FALSE
          TRUE
          TRUE
        }>ELSE<{
          s6 POP
          FALSE
          s0 s2 XCHG
          FALSE
          s0 s5 XCHG
          8 STU
          s0 s3 XCHG
          s0 s5 XCHG
          s6 s6 s4 XCHG3
        }>
        s4 s5 XCHG
        s0 s3 XCHG
        s2 s4 XCHG2
      }>
      DUP
      NOT
    }>
    DROP
    NIP
    s4 POP
    s0 s3 XCHG
    IFJMP:<{
      3 BLKDROP
      PUSHNULL
    }>
    s0 s2 XCHG
    NOT
    IF:<{
      CONS
    }>ELSE<{
      NIP
    }>
    NEWC
    SWAP
    UNCONS
    -ROT
    STBR
    WHILE:<{
      OVER
      ISNULL
      NOT
    }>DO<{
      SWAP
      UNCONS
      0 PUSHINT
      s0 s3 XCHG2
      8 STU
      SWAP
      STBR
    }>
    0 PUSHINT
    s2 POP
    8 STU
    ENDC
    CTOS
  }>
  dns_internal_verify PROCREF:<{
    c2 SAVE
    SAMEALTSAVE
    DUP
    SREFS
    0 NEQINT
    IFJMP:<{
      DROP
      FALSE
    }>
    DUP
    SBITS
    DUP
    3 MODPOW2#
    0 NEQINT
    IFJMP:<{
      2DROP
      FALSE
    }>
    DUP
    0 EQINT
    IFJMP:<{
      2DROP
      TRUE
    }>
    3 RSHIFT#
    0 PUSHINT
    TRUE
    FALSE
    s0 s3 XCHG
    REPEAT:<{
      s0 s3 XCHG
      8 LDU
      OVER
      0 EQINT
      IF:<{
        NIP
        s3 POP
        0 EQINT
        IFJMP:<{
          2DROP
          FALSE
          RETALT
        }>
        IFJMP:<{
          DROP
          FALSE
          RETALT
        }>
        0 PUSHINT
        FALSE
        TRUE
      }>ELSE<{
        s3 POP
        DUP
        45 EQINT
        OVER
        47 GTINT
        s2 PUSH
        58 LESSINT
        AND
        s1 s(-1) PUXC
        OR
        s2 PUSH
        96 GTINT
        s0 s3 XCHG
        123 LESSINT
        s1 s3 XCHG
        AND
        s1 s2 XCHG
        OR
        NOT
        IFJMP:<{
          4 BLKDROP
          FALSE
          RETALT
        }>
        s0 s3 PUXC
        AND
        IFJMP:<{
          3 BLKDROP
          FALSE
          RETALT
        }>
        FALSE
        SWAP
        INC
        s0 s3 s3 XCHG3
      }>
      s1 s2 XCHG
    }>
    DROP
    s2 POP
    0 PUSHINT
    SWAP
    NOT
    AND
    EQUAL
  }>
  dns_internal_normalize PROCREF:<{
    DUP
    SREFS
    0 EQINT
    134 THROWIFNOT
    NEWC
    OVER
    SBITS
    3 RSHIFT#
    REPEAT:<{
      SWAP
      8 LDU
      OVER
      98 EQINT
      IF:<{
        54 PUSHINT
        s2 POP
      }>
      OVER
      103 EQINT
      s2 PUSH
      113 EQINT
      OR
      IF:<{
        57 PUSHINT
        s2 POP
      }>
      OVER
      108 EQINT
      IF:<{
        49 PUSHINT
        s2 POP
      }>
      OVER
      111 EQINT
      IF:<{
        48 PUSHINT
        s2 POP
      }>
      OVER
      115 EQINT
      IF:<{
        53 PUSHINT
        s2 POP
      }>
      OVER
      117 EQINT
      IF:<{
        118 PUSHINT
        s2 POP
      }>
      OVER
      122 EQINT
      IF:<{
        50 PUSHINT
        s2 POP
      }>
      s0 s2 XCHG
      8 STU
    }>
    NIP
    ENDC
    CTOS
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $SimpleDNSFactory$_contract_load INLINECALLDICT
    s0 s2 XCHG
    IFJMP:<{
      2DROP
    }>
    DUP
    SBITS
    31 GTINT
    IF:<{
      32 LDU
      SWAP
      2490013878 PUSHINT
      EQUAL
      IFJMP:<{
        64 LDU
        DROP
        $DeployOk$_constructor_queryId INLINECALLDICT
        NEWC
        $DeployOk$_store_cell INLINECALLDICT
        $SimpleDNSFactory$_fun_notify INLINECALLDICT
        $SimpleDNSFactory$_contract_store INLINECALLDICT
        RETALT
      }>
    }>
    HASHSU
    87651377378655782259476005716871872139955156637688197487361824677095371478895 PUSHINT
    EQUAL
    IFJMP:<{
      INC
      __tact_context_get_sender INLINECALLDICT
      OVER
      $Dns$_init_child INLINECALLDICT
      2DUP
      $global_contractAddress INLINECALLDICT
      100000000 PUSHINT
      0 PUSHINT
          RAWRESERVE
      FALSE
      0 PUSHINT
      130 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s7 s(-1) PUXC
      $FactoryDeploy$_constructor_queryId_cashback INLINECALLDICT
      NEWC
      $FactoryDeploy$_store_cell INLINECALLDICT
      4 3 REVERSE
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $SendParameters$_constructor_bounce_to_value_mode_code_data_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      $SimpleDNSFactory$_contract_store INLINECALLDICT
    }>
    DROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
