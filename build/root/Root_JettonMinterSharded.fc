#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; Root_JettonMinterSharded.headers.fc
;;
;; Header files for JettonMinterSharded
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_set_slice_uint
(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl) inline;

;; $JettonTransferInternal$_store
builder $JettonTransferInternal$_store(builder build_0, (int, int, int, slice, slice, int, slice) v) inline;

;; $JettonTransferInternal$_store_cell
cell $JettonTransferInternal$_store_cell((int, int, int, slice, slice, int, slice) v, builder b) inline;

;; $JettonTransferInternal$_load
(slice, ((int, int, int, slice, slice, int, slice))) $JettonTransferInternal$_load(slice sc_0) impure inline;

;; $JettonTransferInternal$_load_bounced
(slice, ((int, int, int))) $JettonTransferInternal$_load_bounced(slice sc_0) inline;

;; $JettonExcesses$_store
builder $JettonExcesses$_store(builder build_0, (int) v) inline;

;; $JettonExcesses$_store_cell
cell $JettonExcesses$_store_cell((int) v, builder b) inline;

;; $Upgrade$_store
builder $Upgrade$_store(builder build_0, (int, int, slice, cell, cell, cell, cell) v) inline;

;; $Upgrade$_store_cell
cell $Upgrade$_store_cell((int, int, slice, cell, cell, cell, cell) v, builder b) inline;

;; $IdGenTrack$_store
builder $IdGenTrack$_store(builder build_0, (slice, slice, slice, slice) v) inline;

;; $IdGenTrack$_store_cell
cell $IdGenTrack$_store_cell((slice, slice, slice, slice) v, builder b) inline;

;; $JettonMinterSharded$_store
builder $JettonMinterSharded$_store(builder build_0, (int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) v) inline;

;; $JettonMinterSharded$_load
(slice, ((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell))) $JettonMinterSharded$_load(slice sc_0) inline;

;; $StdAddress$_get_workchain
_ $StdAddress$_get_workchain((int, int) v) inline;

;; $JettonMinterState$_to_external
(int, int, slice, cell, cell) $JettonMinterState$_to_external(((int, int, slice, cell, cell)) v) inline;

;; $JettonMinterSharded$_to_external
(int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $JettonMinterSharded$_to_external(((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell)) v) inline;

;; $JettonWalletSharded$init$_store
builder $JettonWalletSharded$init$_store(builder build_0, (slice, slice, int) v) inline;

;; $JettonMinterSharded$init$_load
(slice, ((int, slice, cell))) $JettonMinterSharded$init$_load(slice sc_0) inline;

;; $JettonWalletSharded$_code_child
cell $JettonWalletSharded$_code_child() inline;

;; $JettonMinterSharded$_contract_init
(int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $JettonMinterSharded$_contract_init(int $totalSupply, slice $owner, cell $jettonContent) impure inline;

;; $JettonMinterSharded$_contract_load
(int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $JettonMinterSharded$_contract_load() impure inline;

;; $JettonMinterSharded$_contract_store
() $JettonMinterSharded$_contract_store((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) v) impure inline;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $BasechainAddress$_constructor_hash
((int)) $BasechainAddress$_constructor_hash(int $hash) inline;

;; $global_emptyBasechainAddress
(int) $global_emptyBasechainAddress() impure inline;

;; $Builder$_fun_storeBasechainAddress
builder $Builder$_fun_storeBasechainAddress(builder $self, (int) $address) impure inline;

;; $global_makeTakeWalletAddressMsg
cell $global_makeTakeWalletAddressMsg((int) $targetJettonWallet, (int, slice, int) $msg) impure inline;

;; $global_changeShard
int $global_changeShard(int $hash, int $shard) impure inline;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $Builder$_fun_storeShardedStateInit
builder $Builder$_fun_storeShardedStateInit(builder $self, (cell, cell) $init) impure inline;

;; $Slice$_fun_asCell
cell $Slice$_fun_asCell(slice $self) impure inline;

;; $Address$_fun_getShard
int $Address$_fun_getShard(slice $self) impure inline;

;; $MessageParameters$_fun_send
() $MessageParameters$_fun_send((int, cell, int, slice, int) $self) impure inline;

;; $ShardDeployParameters$_constructor_shard_deployParameters
(((int, cell, int, int, (cell, cell)), int)) $ShardDeployParameters$_constructor_shard_deployParameters(int $shard, (int, cell, int, int, (cell, cell)) $deployParameters) inline;

;; $DeployParameters$_fun_toShard
((int, cell, int, int, (cell, cell)), int) $DeployParameters$_fun_toShard((int, cell, int, int, (cell, cell)) $self, int $shard) impure inline;

;; $ShardDeployParameters$_fun_send
() $ShardDeployParameters$_fun_send(((int, cell, int, int, (cell, cell)), int) $self) impure inline;

;; $JettonWalletSharded$_init_child
(cell, cell) $JettonWalletSharded$_init_child(slice $owner, slice $minter, int $balance) inline;

;; $DeployParameters$_constructor_value_mode_body_init
((int, cell, int, int, (cell, cell))) $DeployParameters$_constructor_value_mode_body_init(int $value, int $mode, cell $body, (cell, cell) $init) inline;

;; $MessageParameters$_constructor_to_value_mode
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;

;; $Upgrade$_constructor_sender_walletVersion_newWalletCode
((int, int, slice, cell, cell, cell, cell)) $Upgrade$_constructor_sender_walletVersion_newWalletCode(slice $sender, int $walletVersion, cell $newWalletCode) inline;

;; $StateInit$_constructor_code_data
((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline;

;; $MessageParameters$_constructor_to_mode_bounce_value_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_mode_bounce_value_body(slice $to, int $mode, int $bounce, int $value, cell $body) inline;

;; $JettonMinterSharded$_fun_sendUpgrade
((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), ()) $JettonMinterSharded$_fun_sendUpgrade((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $to) impure inline;

;; $JettonMinterSharded$_fun_state
((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), (int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell)) $JettonMinterSharded$_fun_state((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self) impure inline;

;; $JettonMinterState$_constructor_totalSupply_mintable_adminAddress_jettonContent_jettonWalletCode
((int, int, slice, cell, cell)) $JettonMinterState$_constructor_totalSupply_mintable_adminAddress_jettonContent_jettonWalletCode(int $totalSupply, int $mintable, slice $adminAddress, cell $jettonContent, cell $jettonWalletCode) inline;

;; $JettonMinterSharded$_fun_get_jetton_data
((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), (int, int, slice, cell, cell)) $JettonMinterSharded$_fun_get_jetton_data((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self) impure inline;

;; $JettonMinterSharded$_fun_getWalletInit
((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), (cell, cell)) $JettonMinterSharded$_fun_getWalletInit((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $address) impure inline;

;; $JettonMinterSharded$_fun_getJettonWalletInit
((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), cell) $JettonMinterSharded$_fun_getJettonWalletInit((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $address) impure inline;

;; $JettonMinterSharded$_fun_getJettonWalletByOwner
((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), slice) $JettonMinterSharded$_fun_getJettonWalletByOwner((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $jettonWalletOwner) impure inline;

;; $JettonMinterSharded$_fun_get_wallet_address
((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), slice) $JettonMinterSharded$_fun_get_wallet_address((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $ownerAddress) impure inline;

;; $JettonMinterSharded$_fun_getJettonBasechainWalletByOwner
((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), (int)) $JettonMinterSharded$_fun_getJettonBasechainWalletByOwner((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $jettonWalletOwner) impure inline;

;; $MessageParameters$_constructor_body_to_value_mode
((int, cell, int, slice, int)) $MessageParameters$_constructor_body_to_value_mode(cell $body, slice $to, int $value, int $mode) inline;

;; $MessageParameters$_constructor_to_body_value_bounce_mode
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_body_value_bounce_mode(slice $to, cell $body, int $value, int $bounce, int $mode) inline;

;; $JettonExcesses$_constructor_queryId
((int)) $JettonExcesses$_constructor_queryId(int $queryId) inline;


;; Root_JettonMinterSharded.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(slice, slice) __tact_load_address_opt(slice cs) asm """

            b{00} SDBEGINSQ
            IF:<{
              PUSHNULL
            }>ELSE<{
              LDMSGADDR
              SWAP
            }>

""";

builder __tact_store_addr_none(builder b) asm "b{00} STSLICECONST";

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        return __tact_store_addr_none(b);
    } else {
        return b.store_slice(address);
    }
}

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTDEL
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
    }
}

builder $global_beginCell() impure asm """
    NEWC
""";

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

int $global_getComputeFee(int $gasUsed, int $isMasterchain) impure asm """
    GETGASFEE
""";

int $global_getForwardFee(int $cells, int $bits, int $isMasterchain) impure asm """
    GETFORWARDFEE
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // → Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_cashback(slice $to) impure asm """
    NEWC
    x{42_} STSLICECONST // .storeUint(0x10, 6)
    STSLICE          // .storeAddress(to)
    0 PUSHINT        // 0
    111 STUR         // .storeUint(0, 111)
                     // 4 zeros for coins and 107 zeros for lt, fees, etc.
    ENDC
    66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
    SENDRAWMSG
""";

() $global_sendRawMessage(cell $msg, int $mode) impure asm """
    SENDRAWMSG
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

() $global_emit(cell $body) impure inline {
    cell $c = $Builder$_fun_endCell($Builder$_fun_storeRef($body, store_uint($global_beginCell(), 15211807202738752817960438464513, 104)));
    $global_sendRawMessage($c, 0);
}

(int, int) $global_parseStdAddress(slice $slice) impure asm """
    REWRITESTDADDR
""";

(int) $global_emptyBasechainAddress() impure inline {
    return $BasechainAddress$_constructor_hash(null());
}

builder $Builder$_fun_storeMaybeRef(cell $cell, builder $self) impure asm """
    STOPTREF
""";

builder $Builder$_fun_storeAddress(builder $self, slice $address) impure asm """
    STSLICER
""";

builder $Builder$_fun_storeBasechainAddress(builder $self, (int) $address) impure inline {
    var ($self) = $self;
    var (($address'hash)) = $address;
    if (null?($address'hash)) {
        return store_uint($self, 0, 2);
    }
    return store_uint(store_uint($self, 1024, 11), __tact_not_null($address'hash), 256);
}

builder $Builder$_fun_storeBool(int $value, builder $self) impure asm """
    1 STI
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeSlice(builder $self, slice $slice) impure asm """
    STSLICER
""";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Builder$_fun_asSlice(builder $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($Builder$_fun_endCell($self));
}

(slice, ()) $Slice$_fun_skipBits(slice $self, int $l) impure asm """
    SDSKIPFIRST
""";

cell $Slice$_fun_asCell(slice $self) impure inline {
    var ($self) = $self;
    return $Builder$_fun_endCell($Builder$_fun_storeSlice($global_beginCell(), $self));
}

(slice, slice) $Slice$_fun_loadAddress(slice $self) impure asm( -> 1 0) """
    LDMSGADDR
""";

int $Cell$_fun_hash(cell $self) impure asm """
    HASHCU
""";

slice $Address$_fun_asSlice(slice $self) impure asm "NOP";

int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure asm """
    LDMSGADDR   // load dest:MsgAddressInt
    LDGRAMS     // load value:CurrencyCollection
    ONE
    SDSKIPFIRST // skip extra currency collection
    LDGRAMS     // load ihr_fee
    LDGRAMS     // load fwd_fee, we'll be using this!
    DROP        // drop remaining Slice (with created_lt and created_at)

    // There are 7 entries on the stack — first 3 fields of Context plus 4 loaded ones.
    // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
    6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context

    ZERO              // not masterchain
    GETORIGINALFWDFEE // floor(fwd_fee * 2^16 / (2^16 - first_frac)), where
                      // first_frac is a value listed in config param 25
                      // of the blockchain: https://tonviewer.com/config#25
                      // this instruction effectively multiplies the fwd_fee by 1.5,
                      // at least for the current value of first_frac, which is 21845
""";

;; Root_JettonMinterSharded.constants.fc
;; String ""
slice __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7() asm """
    B{b5ee9c724101010100020000004cacb9cd} B>boc <s PUSHSLICE
""";

;; Root_JettonMinterSharded.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline {
    return ($code, $data);
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return ($mode, null(), $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_mode_bounce_value_body(slice $to, int $mode, int $bounce, int $value, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_body_to_value_mode(cell $body, slice $to, int $value, int $mode) inline {
    return ($mode, $body, $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_body_value_bounce_mode(slice $to, cell $body, int $value, int $bounce, int $mode) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: DeployParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 bounce:bool init:StateInit{code:^cell,data:^cell} = DeployParameters
;;

((int, cell, int, int, (cell, cell))) $DeployParameters$_constructor_value_mode_body_init(int $value, int $mode, cell $body, (cell, cell) $init) inline {
    return ($mode, $body, $value, true, $init);
}

;;
;; Type: StdAddress
;; TLB: _ workchain:int8 address:uint256 = StdAddress
;;

_ $StdAddress$_get_workchain((int, int) v) inline {
    var (v'workchain, v'address) = v;
    return v'workchain;
}

;;
;; Type: BasechainAddress
;; TLB: _ hash:Maybe int257 = BasechainAddress
;;

((int)) $BasechainAddress$_constructor_hash(int $hash) inline {
    return ($hash);
}

;;
;; Type: JettonTransferInternal
;; Header: 0x178d4519
;; TLB: jetton_transfer_internal#178d4519 queryId:uint64 walletVersion:uint10 amount:coins sender:address responseDestination:address forwardTonAmount:coins forwardPayload:remainder<slice> = JettonTransferInternal
;;

builder $JettonTransferInternal$_store(builder build_0, (int, int, int, slice, slice, int, slice) v) inline {
    var (v'queryId, v'walletVersion, v'amount, v'sender, v'responseDestination, v'forwardTonAmount, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_uint(v'walletVersion, 10);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = __tact_store_address_opt(build_0, v'responseDestination);
    build_0 = build_0.store_varuint16(v'forwardTonAmount);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $JettonTransferInternal$_store_cell((int, int, int, slice, slice, int, slice) v, builder b) inline {
    return $JettonTransferInternal$_store(b, v).end_cell();
}

(slice, ((int, int, int, slice, slice, int, slice))) $JettonTransferInternal$_load(slice sc_0) impure inline {
    throw_unless(129, sc_0~load_uint(32) == 395134233);
    var v'queryId = sc_0~load_uint(64);
    var v'walletVersion = sc_0~load_uint(10);
    var v'amount = sc_0~load_varuint16();
    var v'sender = sc_0~load_msg_addr();
    var v'responseDestination = sc_0~__tact_load_address_opt();
    var v'forwardTonAmount = sc_0~load_varuint16();
    var v'forwardPayload = sc_0;
    return (sc_0, (v'queryId, v'walletVersion, v'amount, v'sender, v'responseDestination, v'forwardTonAmount, v'forwardPayload));
}

(slice, ((int, int, int))) $JettonTransferInternal$_load_bounced(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'walletVersion = sc_0~load_uint(10);
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'queryId, v'walletVersion, v'amount));
}

;;
;; Type: JettonExcesses
;; Header: 0xd53276db
;; TLB: jetton_excesses#d53276db queryId:uint64 = JettonExcesses
;;

builder $JettonExcesses$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $JettonExcesses$_store_cell((int) v, builder b) inline {
    return $JettonExcesses$_store(b, v).end_cell();
}

((int)) $JettonExcesses$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Upgrade
;; Header: 0x2508d66a
;; TLB: upgrade#2508d66a rootVersion:Maybe uint10 walletVersion:Maybe uint10 sender:address newRootData:Maybe ^cell newRootCode:Maybe ^cell newWalletData:Maybe ^cell newWalletCode:Maybe ^cell = Upgrade
;;

builder $Upgrade$_store(builder build_0, (int, int, slice, cell, cell, cell, cell) v) inline {
    var (v'rootVersion, v'walletVersion, v'sender, v'newRootData, v'newRootCode, v'newWalletData, v'newWalletCode) = v;
    build_0 = store_uint(build_0, 621336170, 32);
    build_0 = ~ null?(v'rootVersion) ? build_0.store_int(true, 1).store_uint(v'rootVersion, 10) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'walletVersion) ? build_0.store_int(true, 1).store_uint(v'walletVersion, 10) : build_0.store_int(false, 1);
    build_0 = __tact_store_address_opt(build_0, v'sender);
    build_0 = build_0.store_maybe_ref(v'newRootData);
    build_0 = build_0.store_maybe_ref(v'newRootCode);
    var build_1 = begin_cell();
    build_1 = build_1.store_maybe_ref(v'newWalletData);
    build_1 = build_1.store_maybe_ref(v'newWalletCode);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

cell $Upgrade$_store_cell((int, int, slice, cell, cell, cell, cell) v, builder b) inline {
    return $Upgrade$_store(b, v).end_cell();
}

((int, int, slice, cell, cell, cell, cell)) $Upgrade$_constructor_sender_walletVersion_newWalletCode(slice $sender, int $walletVersion, cell $newWalletCode) inline {
    return (null(), $walletVersion, $sender, null(), null(), null(), $newWalletCode);
}

;;
;; Type: IdGenTrack
;; Header: 0x00000051
;; TLB: id_gen_track#00000051 account:address invitor:address approver:address payload:remainder<slice> = IdGenTrack
;;

builder $IdGenTrack$_store(builder build_0, (slice, slice, slice, slice) v) inline {
    var (v'account, v'invitor, v'approver, v'payload) = v;
    build_0 = store_uint(build_0, 81, 32);
    build_0 = build_0.store_slice(v'account);
    build_0 = build_0.store_slice(v'invitor);
    build_0 = build_0.store_slice(v'approver);
    build_0 = build_0.store_slice(v'payload);
    return build_0;
}

cell $IdGenTrack$_store_cell((slice, slice, slice, slice) v, builder b) inline {
    return $IdGenTrack$_store(b, v).end_cell();
}

;;
;; Type: ShardDeployParameters
;; TLB: _ deployParameters:DeployParameters{mode:int257,body:Maybe ^cell,value:int257,bounce:bool,init:StateInit{code:^cell,data:^cell}} shard:uint8 = ShardDeployParameters
;;

(((int, cell, int, int, (cell, cell)), int)) $ShardDeployParameters$_constructor_shard_deployParameters(int $shard, (int, cell, int, int, (cell, cell)) $deployParameters) inline {
    return ($deployParameters, $shard);
}

;;
;; Type: JettonMinterState
;; TLB: _ totalSupply:coins mintable:bool adminAddress:address jettonContent:^cell jettonWalletCode:^cell = JettonMinterState
;;

(int, int, slice, cell, cell) $JettonMinterState$_to_external(((int, int, slice, cell, cell)) v) inline {
    var (v'totalSupply, v'mintable, v'adminAddress, v'jettonContent, v'jettonWalletCode) = v; 
    return (v'totalSupply, v'mintable, v'adminAddress, v'jettonContent, v'jettonWalletCode);
}

((int, int, slice, cell, cell)) $JettonMinterState$_constructor_totalSupply_mintable_adminAddress_jettonContent_jettonWalletCode(int $totalSupply, int $mintable, slice $adminAddress, cell $jettonContent, cell $jettonWalletCode) inline {
    return ($totalSupply, $mintable, $adminAddress, $jettonContent, $jettonWalletCode);
}

;;
;; Type: JettonWalletSharded
;; TLB: _ owner:address ownerAfterRecovery:address minter:address nominee:address invitor:address invitor0:address id:IdInfo{username:^string,lattitude:^string,longitude:^string,address:address} balance:coins taxAsTxnFeePercent:int6 turnover:coins debts:dict<address, coins> debt:coins insurance:Insurance{emi:coins,startStop:uint42} invited:dict<address, coins> friends:dict<address, coins> closeFriendsAndVouched:dict<address, bool> closeFriendsCount:uint4 recoveryVouchersCount:uint4 pendingRequests:dict<address, coins> followers:dict<address, coins> followings:dict<address, coins> reports:dict<address, bool> reportReason:bool reporterCount:uint10 disputerCount:uint10 reportResolutionTime:uint32 connections:uint8 terminated:bool active:bool accountInitTime:uint32 lastTxnTime:uint32 lastMsgTo:address version:uint10 mintable:bool lastRewardClaimTime:uint32 baseWalletCode:^cell = JettonWalletSharded
;;

builder $JettonWalletSharded$init$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'owner, v'minter, v'balance) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'minter);
    build_0 = build_0.store_varuint16(v'balance);
    return build_0;
}

cell $JettonWalletSharded$_child_get_code() impure asm """
    B{} B>boc PUSHREF
""";

cell $JettonWalletSharded$_code_child() inline {
    return $JettonWalletSharded$_child_get_code();
}

(cell, cell) $JettonWalletSharded$_init_child(slice $owner, slice $minter, int $balance) inline {
    ;; Build init code cell

    ;; Contract Code: JettonWalletSharded
    cell init_code = $JettonWalletSharded$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $JettonWalletSharded$init$_store(b, ($owner, $minter, $balance));
    return (init_code, b.end_cell());
}

;;
;; Type: JettonMinterSharded
;; TLB: _ totalSupply:coins totalAccounts:uint32 treasurySurplus:coins treasuryDeficits:coins owner:address jettonContent:^cell jettonWalletCode:^cell jettonWalletInitialCode:^cell mintable:bool version:uint10 walletVersion:uint10 tosHash:^string mbrpAmount:coins publicWorks:dict<address, uint10> votes:dict<address, uint20> crowdFund:dict<uint10, uint10> = JettonMinterSharded
;;

builder $JettonMinterSharded$_store(builder build_0, (int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) v) inline {
    var (v'totalSupply, v'totalAccounts, v'treasurySurplus, v'treasuryDeficits, v'owner, v'jettonContent, v'jettonWalletCode, v'jettonWalletInitialCode, v'mintable, v'version, v'walletVersion, v'tosHash, v'mbrpAmount, v'publicWorks, v'votes, v'crowdFund) = v;
    build_0 = build_0.store_varuint16(v'totalSupply);
    build_0 = build_0.store_uint(v'totalAccounts, 32);
    build_0 = build_0.store_varuint16(v'treasurySurplus);
    build_0 = build_0.store_varuint16(v'treasuryDeficits);
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_ref(v'jettonContent);
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(v'jettonWalletCode);
    build_1 = build_1.store_ref(v'jettonWalletInitialCode);
    build_1 = build_1.store_int(v'mintable, 1);
    build_1 = build_1.store_uint(v'version, 10);
    build_1 = build_1.store_uint(v'walletVersion, 10);
    build_1 = build_1.store_builder_ref(begin_cell().store_slice(v'tosHash));
    build_1 = build_1.store_varuint16(v'mbrpAmount);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'publicWorks);
    build_2 = build_2.store_dict(v'votes);
    build_2 = build_2.store_dict(v'crowdFund);
    build_1 = store_builder_ref(build_1, build_2);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell))) $JettonMinterSharded$_load(slice sc_0) inline {
    var v'totalSupply = sc_0~load_varuint16();
    var v'totalAccounts = sc_0~load_uint(32);
    var v'treasurySurplus = sc_0~load_varuint16();
    var v'treasuryDeficits = sc_0~load_varuint16();
    var v'owner = sc_0~load_msg_addr();
    var v'jettonContent = sc_0~load_ref();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'jettonWalletCode = sc_1~load_ref();
    var v'jettonWalletInitialCode = sc_1~load_ref();
    var v'mintable = sc_1~load_int(1);
    var v'version = sc_1~load_uint(10);
    var v'walletVersion = sc_1~load_uint(10);
    var v'tosHash = sc_1~load_ref().begin_parse();
    var v'mbrpAmount = sc_1~load_varuint16();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'publicWorks = sc_2~load_dict();
    var v'votes = sc_2~load_dict();
    var v'crowdFund = sc_2~load_dict();
    return (sc_0, (v'totalSupply, v'totalAccounts, v'treasurySurplus, v'treasuryDeficits, v'owner, v'jettonContent, v'jettonWalletCode, v'jettonWalletInitialCode, v'mintable, v'version, v'walletVersion, v'tosHash, v'mbrpAmount, v'publicWorks, v'votes, v'crowdFund));
}

(int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $JettonMinterSharded$_to_external(((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell)) v) inline {
    var (v'totalSupply, v'totalAccounts, v'treasurySurplus, v'treasuryDeficits, v'owner, v'jettonContent, v'jettonWalletCode, v'jettonWalletInitialCode, v'mintable, v'version, v'walletVersion, v'tosHash, v'mbrpAmount, v'publicWorks, v'votes, v'crowdFund) = v; 
    return (v'totalSupply, v'totalAccounts, v'treasurySurplus, v'treasuryDeficits, v'owner, v'jettonContent, v'jettonWalletCode, v'jettonWalletInitialCode, v'mintable, v'version, v'walletVersion, v'tosHash, v'mbrpAmount, v'publicWorks, v'votes, v'crowdFund);
}

(slice, ((int, slice, cell))) $JettonMinterSharded$init$_load(slice sc_0) inline {
    var v'totalSupply = sc_0~load_varuint16();
    var v'owner = sc_0~load_msg_addr();
    var v'jettonContent = sc_0~load_ref();
    return (sc_0, (v'totalSupply, v'owner, v'jettonContent));
}

(int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $JettonMinterSharded$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$JettonMinterSharded$_load();
    }
    else {
        (int $totalSupply, slice $owner, cell $jettonContent) = $sc~$JettonMinterSharded$init$_load();
        $sc.end_parse();
        return $JettonMinterSharded$_contract_init($totalSupply, $owner, $jettonContent);
    }
}

() $JettonMinterSharded$_contract_store((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $JettonMinterSharded$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract JettonMinterSharded functions
;;

(int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $JettonMinterSharded$_contract_init(int $totalSupply, slice $owner, cell $jettonContent) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = (null(), 0, 0, 0, null(), null(), null(), null(), true, 0, 0, __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), 1000000000000, null(), null(), null());
    $self'totalSupply = $totalSupply;
    $self'owner = $owner;
    $self'jettonContent = $jettonContent;
    $self'jettonWalletCode = $JettonWalletSharded$_code_child();
    $self'jettonWalletInitialCode = $JettonWalletSharded$_code_child();
    return ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund);
}

() $global_setCode(cell $newCode) impure asm """
    SETCODE
""";

() $global_setData(cell $newData) impure asm """
    c4 POP
""";

() $global_checkEitherForwardPayload(slice $forwardPayload) impure asm """
    LDDICT // Throws 9 if Either bit = 1 and ref is not present
    SWAP
    ISNULL
    <{
        DROP
    }> PUSHCONT
    <{
        ENDS // Also throws 9 if slice is not empty
    }> PUSHCONT
    IFELSE
""";

cell $global_makeTakeWalletAddressMsg((int) $targetJettonWallet, (int, slice, int) $msg) impure inline {
    var (($targetJettonWallet'hash)) = $targetJettonWallet;
    var (($msg'queryId, $msg'ownerAddress, $msg'includeAddress)) = $msg;
    return $Builder$_fun_endCell($Builder$_fun_storeMaybeRef(($msg'includeAddress ? $Builder$_fun_endCell($Builder$_fun_storeAddress($global_beginCell(), $msg'ownerAddress)) : null()), $Builder$_fun_storeBasechainAddress(store_uint(store_uint($global_beginCell(), 0xd1735400, 32), $msg'queryId, 64), ($targetJettonWallet'hash))));
}

int $global_extractLowBits(int $value, int $count) impure asm """
    MODPOW2
""";

int $global_changeShard(int $hash, int $shard) impure inline {
    return ($global_extractLowBits($hash, 248) | ($shard << 248));
}

builder $Builder$_fun_storeShardedStateInit(builder $self, (cell, cell) $init) impure inline {
    var ($self) = $self;
    var (($init'code, $init'data)) = $init;
    return $Builder$_fun_storeRef($init'data, $Builder$_fun_storeRef($init'code, store_uint(store_uint($self, 40, 6), 6, 4)));
}

int $Address$_fun_getShard(slice $self) impure inline {
    var ($self) = $self;
    slice $sl = $Address$_fun_asSlice($self);
    $sl~$Slice$_fun_skipBits(11);
    return $sl~load_uint(8);
}

() $MessageParameters$_fun_send((int, cell, int, slice, int) $self) impure inline {
    var (($self'mode, $self'body, $self'value, $self'to, $self'bounce)) = $self;
    var (($self'mode, $self'body, $self'value, $self'to, $self'bounce)) = $self;
    $global_message(($self'mode, $self'body, $self'value, $self'to, $self'bounce));
}

((int, cell, int, int, (cell, cell)), int) $DeployParameters$_fun_toShard((int, cell, int, int, (cell, cell)) $self, int $shard) impure inline {
    var (($self'mode, $self'body, $self'value, $self'bounce, ($self'init'code, $self'init'data))) = $self;
    var (($self'mode, $self'body, $self'value, $self'bounce, ($self'init'code, $self'init'data))) = $self;
    return $ShardDeployParameters$_constructor_shard_deployParameters($shard, ($self'mode, $self'body, $self'value, $self'bounce, ($self'init'code, $self'init'data)));
}

() $ShardDeployParameters$_fun_send(((int, cell, int, int, (cell, cell)), int) $self) impure inline {
    var ((($self'deployParameters'mode, $self'deployParameters'body, $self'deployParameters'value, $self'deployParameters'bounce, ($self'deployParameters'init'code, $self'deployParameters'init'data)), $self'shard)) = $self;
    var ((($self'deployParameters'mode, $self'deployParameters'body, $self'deployParameters'value, $self'deployParameters'bounce, ($self'deployParameters'init'code, $self'deployParameters'init'data)), $self'shard)) = $self;
    cell $newStateInit = $Builder$_fun_endCell($Builder$_fun_storeShardedStateInit($global_beginCell(), ($self'deployParameters'init'code, $self'deployParameters'init'data)));
    cell $msg = $Builder$_fun_endCell($Builder$_fun_storeMaybeRef($self'deployParameters'body, $Builder$_fun_storeRef($newStateInit, store_uint($Builder$_fun_storeCoins(store_uint(store_uint($Builder$_fun_storeBool($self'deployParameters'bounce, store_uint($global_beginCell(), 1, 2)), 1024, 14), $global_changeShard($Cell$_fun_hash($newStateInit), $self'shard), 256), $self'deployParameters'value), 3, 107))));
    $global_sendRawMessage($msg, $self'deployParameters'mode);
}

((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), ()) $JettonMinterSharded$_fun_sendUpgrade((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $to) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = $self;
    $MessageParameters$_fun_send($MessageParameters$_constructor_to_mode_bounce_value_body($to, 66, false, 0, $Upgrade$_store_cell($Upgrade$_constructor_sender_walletVersion_newWalletCode($self'owner, $self'walletVersion, $self'jettonWalletCode), begin_cell())));
    return (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund), ());
}

((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), (int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell)) $JettonMinterSharded$_fun_state((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = $self;
    var $fresh$ret_100 = ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund);
    return (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund), $fresh$ret_100);
}

((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), (int, int, slice, cell, cell)) $JettonMinterSharded$_fun_get_jetton_data((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = $self;
    var $fresh$ret_101 = $JettonMinterState$_constructor_totalSupply_mintable_adminAddress_jettonContent_jettonWalletCode($self'totalSupply, $self'mintable, $self'owner, $self'jettonContent, $self'jettonWalletCode);
    return (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund), $fresh$ret_101);
}

((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), (cell, cell)) $JettonMinterSharded$_fun_getWalletInit((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $address) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = $self;
    var ($walletInit'code, $walletInit'data) = $JettonWalletSharded$_init_child($address, $global_myAddress(), 0);
    var $fresh$ret_103 = $StateInit$_constructor_code_data($self'jettonWalletInitialCode, $walletInit'data);
    return (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund), $fresh$ret_103);
}

((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), cell) $JettonMinterSharded$_fun_getJettonWalletInit((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $address) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = $self;
    var ($init'code, $init'data) = ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_getWalletInit($address);
    var $fresh$ret_104 = $Builder$_fun_endCell($Builder$_fun_storeShardedStateInit($global_beginCell(), ($init'code, $init'data)));
    return (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund), $fresh$ret_104);
}

((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), slice) $JettonMinterSharded$_fun_getJettonWalletByOwner((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $jettonWalletOwner) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = $self;
    cell $init = ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_getJettonWalletInit($jettonWalletOwner);
    int $ownerShard = $Address$_fun_getShard($jettonWalletOwner);
    slice $expectedAddr = $Builder$_fun_asSlice(store_uint(store_uint(store_uint($global_beginCell(), 4, 3), 0, 8), $global_changeShard($Cell$_fun_hash($init), $ownerShard), 256));
    var $fresh$ret_105 = $expectedAddr~$Slice$_fun_loadAddress();
    return (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund), $fresh$ret_105);
}

((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), slice) $JettonMinterSharded$_fun_get_wallet_address((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $ownerAddress) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = $self;
    var $fresh$ret_102 = ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_getJettonWalletByOwner($ownerAddress);
    return (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund), $fresh$ret_102);
}

((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell), (int)) $JettonMinterSharded$_fun_getJettonBasechainWalletByOwner((int, int, int, int, slice, cell, cell, cell, int, int, int, slice, int, cell, cell, cell) $self, slice $jettonWalletOwner) impure inline {
    var (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)) = $self;
    cell $init = ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_getJettonWalletInit($jettonWalletOwner);
    int $ownerShard = $Address$_fun_getShard($jettonWalletOwner);
    var $fresh$ret_106 = $BasechainAddress$_constructor_hash($global_changeShard($Cell$_fun_hash($init), $ownerShard));
    return (($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund), $fresh$ret_106);
}

;;
;; Get methods of a Contract JettonMinterSharded
;;

_ %state() method_id(77589) {
    var self = $JettonMinterSharded$_contract_load();
    var res = self~$JettonMinterSharded$_fun_state();
    return $JettonMinterSharded$_to_external(res);
}

_ %get_jetton_data() method_id(106029) {
    var self = $JettonMinterSharded$_contract_load();
    var res = self~$JettonMinterSharded$_fun_get_jetton_data();
    return $JettonMinterState$_to_external(res);
}

_ %get_wallet_address(slice $ownerAddress) method_id(103289) {
    slice $ownerAddress = $ownerAddress;
    var self = $JettonMinterSharded$_contract_load();
    var res = self~$JettonMinterSharded$_fun_get_wallet_address($ownerAddress);
    return res;
}

;;
;; Routing of a Contract JettonMinterSharded
;;

;; message opcode reader utility: binary receivers and empty fallback receiver
;; Returns 32 bit message opcode, or returns immediately if the message is shorter than 32 bits
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ IFNOTRET";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund) = $JettonMinterSharded$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF prefix of a bounced message
        in_msg~skip_bits(32);
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg~load_uint(32);
        }
        ;; Bounced handler for JettonTransferInternal message
        if (op == 0x178d4519) {
            var ($msg'queryId, $msg'walletVersion, $msg'amount) = in_msg~$JettonTransferInternal$_load_bounced();
            $self'totalSupply = $self'totalSupply - $msg'amount;
            $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
            return ();
        }
        
        return ();
    }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg.preload_uint(32);
    }
    ;; Receive ProvideWalletAddress message
    if (op == 0x2c76b973) {
        in_msg~skip_bits(32);
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'ownerAddress = in_msg~load_msg_addr();
        var $msg'includeAddress = in_msg~load_int(1);
        int $ownerWorkchain = $StdAddress$_get_workchain($global_parseStdAddress($Address$_fun_asSlice($msg'ownerAddress)));
        int $ownerShard = $Address$_fun_getShard($msg'ownerAddress);
        int $hash = $Cell$_fun_hash(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_getJettonWalletInit($msg'ownerAddress));
        var ($targetJettonWallet'hash) = (($ownerWorkchain == 0) ? $BasechainAddress$_constructor_hash($global_changeShard($hash, $ownerShard)) : $global_emptyBasechainAddress());
        $MessageParameters$_fun_send($MessageParameters$_constructor_body_to_value_mode($global_makeTakeWalletAddressMsg(($targetJettonWallet'hash), ($msg'queryId, $msg'ownerAddress, $msg'includeAddress)), __tact_context_get_sender(), 0, 64));
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive JettonBurnNotification message
    if (op == 0x7bdd97de) {
        in_msg~skip_bits(32);
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'amount = in_msg~load_varuint16();
        var $msg'sender = in_msg~load_msg_addr();
        var $msg'responseDestination = in_msg~__tact_load_address_opt();
        var ($sender'workchain, $sender'address) = $global_parseStdAddress($Address$_fun_asSlice(__tact_context_get_sender()));
        var ($wallet'hash) = ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_getJettonBasechainWalletByOwner($msg'sender);
        throw_unless(724, ( (($sender'workchain == 0)) ? (($sender'address == __tact_not_null($wallet'hash))) : (false) ));
        if ((~ null?($msg'responseDestination))) {
            $self'totalSupply = $self'totalSupply + $msg'amount;
            int $myBal = $global_myBalance();
            $MessageParameters$_fun_send($MessageParameters$_constructor_to_body_value_bounce_mode(__tact_not_null($msg'responseDestination), $JettonExcesses$_store_cell($JettonExcesses$_constructor_queryId($msg'queryId), begin_cell()), (($myBal > 5000000000) ? ($myBal - 1000000000) : 0), false, 66));
        } else {
            $self'totalSupply = $self'totalSupply - $msg'amount;
        }
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive Mint message
    if (op == 0x642b7d07) {
        in_msg~skip_bits(32);
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'receiver = in_msg~load_msg_addr();
        slice sc_1 = in_msg~load_ref().begin_parse();
        var ($msg'mintMessage'queryId, $msg'mintMessage'walletVersion, $msg'mintMessage'amount, $msg'mintMessage'sender, $msg'mintMessage'responseDestination, $msg'mintMessage'forwardTonAmount, $msg'mintMessage'forwardPayload) = sc_1~$JettonTransferInternal$_load();
        throw_unless(700, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        throw_unless(730, $self'mintable);
        throw_unless(734, ($StdAddress$_get_workchain($global_parseStdAddress($Address$_fun_asSlice($msg'receiver))) == 0));
        $global_checkEitherForwardPayload($msg'mintMessage'forwardPayload);
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        throw_unless(703, ($ctx'value > ((((10000000 + $msg'mintMessage'forwardTonAmount) + $Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw))) + $global_getForwardFee(300, 250000, false)) + (2 * $global_getComputeFee(11050, false)))));
        $self'totalSupply = $self'totalSupply + $msg'mintMessage'amount;
        $self'totalAccounts = $self'totalAccounts + 1;
        $ShardDeployParameters$_fun_send($DeployParameters$_fun_toShard($DeployParameters$_constructor_value_mode_body_init(0, 80, $JettonTransferInternal$_store_cell(($msg'mintMessage'queryId, $msg'mintMessage'walletVersion, $msg'mintMessage'amount, $msg'mintMessage'sender, $msg'mintMessage'responseDestination, $msg'mintMessage'forwardTonAmount, $msg'mintMessage'forwardPayload), begin_cell()), ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_getWalletInit($msg'receiver)), $Address$_fun_getShard($msg'receiver)));
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive ClaimTON message
    if (op == 0x393b1ce) {
        in_msg~skip_bits(32);
        var $msg'receiver = in_msg~load_msg_addr();
        throw_unless(700, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $global_nativeReserve(10000000, 16);
        $MessageParameters$_fun_send($MessageParameters$_constructor_to_value_mode($msg'receiver, 0, 128));
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive JettonUpdateContent message
    if (op == 4) {
        in_msg~skip_bits(32);
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'content = in_msg~load_ref();
        throw_unless(700, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $self'jettonContent = $msg'content;
        $self'version = 1;
        $global_cashback(__tact_context_get_sender());
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive RequestUpgradeCode message
    if (op == 0x38) {
        in_msg~skip_bits(32);
        var $msg'version = in_msg~load_uint(10);
        if (($msg'version < $self'walletVersion)) {
            ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_sendUpgrade(__tact_context_get_sender());
        }
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive ChangeOwner message
    if (op == 3) {
        in_msg~skip_bits(32);
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'newOwner = in_msg~load_msg_addr();
        throw_unless(700, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $self'owner = $msg'newOwner;
        $global_cashback(__tact_context_get_sender());
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive InviteApproval message
    if (op == 0x44) {
        in_msg~skip_bits(32);
        var $msg'approved = in_msg~load_int(1);
        var $msg'invitor = in_msg~load_msg_addr();
        var $msg'invitee = in_msg~load_msg_addr();
        var $msg'approver = in_msg~load_msg_addr();
        if ($msg'approved) {
            $self'totalAccounts = $self'totalAccounts + 1;
        } else {
            $self'totalAccounts = $self'totalAccounts - 1;
        }
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive IdGenTrack message
    if (op == 0x51) {
        in_msg~skip_bits(32);
        var $msg'account = in_msg~load_msg_addr();
        var $msg'invitor = in_msg~load_msg_addr();
        var $msg'approver = in_msg~load_msg_addr();
        var $msg'payload = in_msg;
        $global_emit($Slice$_fun_asCell($msg'payload));
        $global_emit($IdGenTrack$_store_cell(($msg'account, $msg'invitor, $msg'approver, $msg'payload), begin_cell()));
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive MintNotify message
    if (op == 0x46) {
        in_msg~skip_bits(32);
        var $msg'amount = in_msg~load_varuint16();
        var $msg'sender = in_msg~load_msg_addr();
        $self'totalSupply = $self'totalSupply + $msg'amount;
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive ApplyGrant message
    if (op == 0x41) {
        in_msg~skip_bits(32);
        var $msg'sender = in_msg~load_msg_addr();
        var $msg'amount = in_msg~load_varuint16();
        $self'publicWorks~__tact_dict_set_slice_uint(267, $msg'sender, $msg'amount, 10);
        $global_cashback($msg'sender);
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive VoteProposal message
    if (op == 0x42) {
        in_msg~skip_bits(32);
        var $msg'sender = in_msg~load_msg_addr();
        var $msg'proposer = in_msg~load_msg_addr();
        var $msg'turnover = in_msg~load_varuint16();
        $self'votes~__tact_dict_set_slice_uint(267, $msg'proposer, $msg'turnover, 20);
        $global_cashback($msg'sender);
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive ChangeMetadataUri message
    if (op == 0xcb862902) {
        in_msg~skip_bits(32);
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'metadata = in_msg;
        throw_unless(700, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $self'jettonContent = $Slice$_fun_asCell($msg'metadata);
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive Upgrade message
    if (op == 0x2508d66a) {
        in_msg~skip_bits(32);
        var $msg'rootVersion = in_msg~load_int(1) ? in_msg~load_uint(10) : null();
        var $msg'walletVersion = in_msg~load_int(1) ? in_msg~load_uint(10) : null();
        var $msg'sender = in_msg~__tact_load_address_opt();
        var $msg'newRootData = in_msg~load_maybe_ref();
        var $msg'newRootCode = in_msg~load_maybe_ref();
        slice sc_1 = in_msg~load_ref().begin_parse();
        var $msg'newWalletData = sc_1~load_maybe_ref();
        var $msg'newWalletCode = sc_1~load_maybe_ref();
        throw_unless(700, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        if ((~ null?($msg'newRootCode))) {
            $self'version = $self'version + 1;
            $global_setCode(__tact_not_null($msg'newRootCode));
        }
        if ((~ null?($msg'newWalletCode))) {
            $self'walletVersion = $self'walletVersion + 1;
            $self'jettonWalletCode = __tact_not_null($msg'newWalletCode);
            ($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_sendUpgrade(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund)~$JettonMinterSharded$_fun_getJettonWalletByOwner($self'owner));
        }
        if ((~ null?($msg'newRootData))) {
            $global_setData(__tact_not_null($msg'newRootData));
            throw(0);
        }
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
        return ();
    }
    ;; Receiver fallback
    $JettonMinterSharded$_contract_store(($self'totalSupply, $self'totalAccounts, $self'treasurySurplus, $self'treasuryDeficits, $self'owner, $self'jettonContent, $self'jettonWalletCode, $self'jettonWalletInitialCode, $self'mintable, $self'version, $self'walletVersion, $self'tosHash, $self'mbrpAmount, $self'publicWorks, $self'votes, $self'crowdFund));
}
