import { toNano, beginCell, Address, SendMode, fromNano } from '@ton/core';
import { NetworkProvider } from '@ton/blueprint';
import { buildJettonMinterFromEnv } from '../src/utils/jetton-helpers';
import { Mint, storeMint } from '../build/root/Root_JettonMinterSharded';
import { getJettonHttpLink, getNetworkFromEnv } from '../src/utils/utils';
import { printSeparator } from '../src/utils/print';
import "dotenv/config";

export async function run(provider: NetworkProvider) {
    const deployer = process.env.DEPLOYER;
    if (deployer === undefined) {
        console.error("deployer address is not provided, please add it to .env file")
        throw new Error("deployer address is not provided")
    }
    const supply = toNano(process.env.JETTON_SUPPLY ?? 1000000000) // 1_000_000_000 jettons
    const deployAmount = toNano("2");
    const deployerAddress = Address.parse(deployer);
    const minter = provider.open(await buildJettonMinterFromEnv(deployerAddress));

    // FIXME deploy first by sending init and value
    const mint = {
        $$type: "Mint",
        queryId: 0n,
        mintMessage: {
            $$type: "JettonTransferInternal",
            amount: supply,
            walletVersion: 0n,
            sender: deployerAddress,
            responseDestination: deployerAddress,
            queryId: 0n,
            forwardTonAmount: 0n,
            forwardPayload: beginCell().storeUint(0, 1).asSlice(),
        },
        receiver: deployerAddress,
    } as Mint;
    await provider.sender().send(
        {
            value: deployAmount,
            to: minter.address,
            sendMode: SendMode.PAY_GAS_SEPARATELY, // + SendMode.IGNORE_ERRORS,
            // bounce: true,
            init: minter.init,
            body: beginCell()
                .store(
                    storeMint(mint),
                )
                .endCell(),
        }
    )
    // await minter.send(
    //     provider.sender(),
    //     {
    //         value: deployAmount,
    //         bounce: true,
    //     },
    //     mint,
    // );

    const network = getNetworkFromEnv()
    console.log(`Running deploy script for ${network} network and for Shard Jetton Minter`)
    console.log(
        "Make sure to send txn from following wallet:. \n" +
        deployerAddress.toString({testOnly: true})
    )
    printSeparator()
    console.log("Minting:: ", fromNano(supply))
    printSeparator()

    try {
        const fs = await import("fs/promises")
        const outFile = `${process.cwd()}/src/scripts/consts.ts`
        const address = minter.address.toString()
        const content = `// Auto-generated by shard.deploy.ts\nexport const ROOT_ADDRESS = "${address}"\n`
        await fs.writeFile(outFile, content, "utf8")
        console.log("Saved minter address const to", outFile)
    } catch (err) {
        console.warn("Failed to save minter address:", err)
    }
    const link = getJettonHttpLink(network, minter.address, "tonviewer")
    console.log(`You can soon check your deployed contract at ${link}`)

    // await provider.waitForDeploy(minter.address, 3, 30000);
    console.log(`Jetton Minter deployed successfully!`);
    // run methods on `dns`
}
